{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},l={};function a(e){var n=l[e];if(void 0!==n)return n.exports;var r=l[e]={exports:{}};return t[e](r,r.exports,a),r.exports}a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var r={};return(()=>{a.r(r),a.d(r,{default:()=>l});var e=a(825),n=a(24),t=a.n(n);const l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),n.components),a=l.wrapper;return a?t().createElement(a,n,t().createElement(r)):r();function r(){var l=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h2:\"h2\",pre:\"pre\"},(0,e.useMDXComponents)(),n.components),a=l.DocLink,r=l.DocTabs,s=l.DocTab,o=l.DocCallOut;return o||c(\"DocCallOut\",!0),a||c(\"DocLink\",!0),s||c(\"DocTab\",!0),r||c(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(l.p,null,\"지금까지는 도큐먼트 단위의 입력, 수정, 삭제, 조회 하는 방법을 알아보았습니다. 하지만 Elasticsearch의 진가는 쿼리를 통한 검색 기능에 있습니다. 검색은 인덱스 단위로 이루어집니다. \",t().createElement(l.code,{display:\"inline\"},\"GET <인덱스명>/_search\"),\" 형식으로 사용하며 쿼리를 입력하지 않으면 전체 도큐먼트를 찾는 \",t().createElement(l.strong,null,\"match_all\"),\" 검색을 합니다.\"),\"\\n\",t().createElement(l.h2,{id:\"uri-검색\"},\"URI 검색\"),\"\\n\",t().createElement(l.p,null,\"_search 뒤에 \",t().createElement(l.code,{display:\"inline\"},\"q\"),\" 파라메터를 사용해서 검색어를 입력할 수 있습니다. 이렇게 요청 주소에 검색어를 넣어 검색하는 방식을 \",t().createElement(l.strong,null,\"URI 검색\"),\"이라고 합니다.\"),\"\\n\",t().createElement(l.p,null,\"앞의 \",t().createElement(a,{id:\"esG7-04-03-bulk-api\",text:\"_bulk api 장에서 만든 test 인덱스\"}),\"에서 \",t().createElement(l.strong,null,'\"value\"'),\" 라는 값을 검색하기 위해서는 다음과 같이 입력합니다.\"),\"\\n\",t().createElement(r,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},\"GET test/_search?q=value\\n\"))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 3,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.105360515,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.105360515,\\n        \"_source\" : {\\n          \"field\" : \"value three\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_score\" : 0.105360515,\\n        \"_source\" : {\\n          \"field\" : \"value two\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"결과를 보면 \",t().createElement(l.code,{display:\"inline\"},\"hits.total.value\"),\" 부분에 검색 결과 전체에 해당되는 문서의 개수가 표시되고 다시 그 안의 \",t().createElement(l.code,{display:\"inline\"},\"hits:[ ]\"),\" 구문 안에 배열로 가장 정확도가 높은 문서 10개가 나타납니다. 이 정확도를 \",t().createElement(l.strong,null,\"relevancy\"),\"(렐러번시 라고 읽습니다) 라고 하며 뒤에서 다시 설명하도록 하겠습니다.\"),\"\\n\",t().createElement(l.p,null,\"두 개의 검색어 \",t().createElement(l.strong,null,'\"value\"'),\" 그리고 \",t().createElement(l.strong,null,'\"three\"'),\" 를 \",t().createElement(l.strong,null,\"AND\"),\" 조건으로 검색 하려면 다음과 같이 입력합니다. URI 쿼리에서는 \",t().createElement(l.code,{display:\"inline\"},\"AND\"),\", \",t().createElement(l.code,{display:\"inline\"},\"OR\"),\", \",t().createElement(l.code,{display:\"inline\"},\"NOT\"),\" 의 사용이 가능하며 반드시 모두 대문자로 입력해야합니다.\"),\"\\n\",t().createElement(r,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},\"GET test/_search?q=value AND three\\n\"))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 3,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 1,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.87546873,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.87546873,\\n        \"_source\" : {\\n          \"field\" : \"value three\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,\"value\"),\" 와 \",t().createElement(l.strong,null,\"three\"),\" 를 모두 포함한 \",t().createElement(l.code,{display:\"inline\"},\"test/_doc/3\"),\" 도큐먼트 만이 결과로 리턴되었습니다. 검색어 value 을 field 필드에서 찾고 싶으면 다음과 같이 \",t().createElement(l.code,{display:\"inline\"},\"<필드명>:<검색어>\"),\" 형태로 입력합니다. 검색은 항상 필드를 지정해서 하는 것이 좋습니다.\"),\"\\n\",t().createElement(r,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},\"GET test/_search?q=field:value\\n\"))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.18232156,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.18232156,\\n        \"_source\" : {\\n          \"field\" : \"value three\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_score\" : 0.18232156,\\n        \"_source\" : {\\n          \"field\" : \"value two\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"URI 검색은 루씬의 기본 쿼리 문법을 사용하며 손쉽게 다룰 수 있습니다. 또한 웹 브라우저 주소창 등에서도 사용 가능하기 때문에 빠르게 쓰긴 쉬우나 좀 더 복잡한 검색을 위해서는 다음에 설명하는 데이터 본문(data body) 검색을 이용해야 합니다.\"),\"\\n\",t().createElement(l.h2,{id:\"데이터-본문-data-body-검색\"},\"데이터 본문 (Data Body) 검색\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,\"데이터 본문(data body) 검색\"),\"은 검색 쿼리를 데이터 본문으로 입력하는 방식입니다. Elasticsearch의 QueryDSL을 사용하며 쿼리 또한 Json 형식으로 되어 있습니다. 처음 익힐때는 다소 복잡 해 보일 수 있으나 주로 사용하는 쿼리 몇가지들 부터 차근 차근 익혀나가면 크게 어렵지 않게 사용이 가능합니다.\"),\"\\n\",t().createElement(l.p,null,\"가장 쉽고 많이 사용되는 것은 \",t().createElement(l.strong,null,\"match\"),\" 쿼리입니다. 여기서는 문법만 살펴보고 다음 검색 장에서 더 많은 쿼리들에 대해 자세히 다뤄보도록 하겠습니다. 데이터 본문 검색으로 field 필드값이 value 인 도큐먼트를 검색하기 위해서는 다음 명령을 실행합니다.\"),\"\\n\",t().createElement(r,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET test/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"field\": \"value\"\\n    }\\n  }\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 2,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.105360515,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.105360515,\\n        \"_source\" : {\\n          \"field\" : \"value three\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_score\" : 0.105360515,\\n        \"_source\" : {\\n          \"field\" : \"value two\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"쿼리 입력은 항상 \",t().createElement(l.code,{display:\"inline\"},\"query\"),\" 지정자로 시작합니다. 그 다음 레벨에서 쿼리의 종류를 지정하는데 위에서는 \",t().createElement(l.strong,null,\"match\"),\" 쿼리를 지정했습니다. 그 다음은 사용할 쿼리 별로 문법이 상이할 수 있는데 match 쿼리는 \",t().createElement(l.code,{display:\"inline\"},\"<필드명>:<검색어>\"),\" 방식으로 입력합니다.\"),\"\\n\",t().createElement(l.h2,{id:\"멀티테넌시-multitenancy\"},\"멀티테넌시 (Multitenancy)\"),\"\\n\",t().createElement(l.p,null,\"Elasticsearch는 여러 개의 인덱스를 한꺼번에 묶어서 검색할 수 있는 \",t().createElement(l.strong,null,\"멀티테넌시\"),\"를 지원합니다.\",t().createElement(l.code,{display:\"inline\"},\"logs-2018-01\"),\", \",t().createElement(l.code,{display:\"inline\"},\"logs-2018-02\"),\" … 와 같이 날짜별로 저장된 인덱스들이 있다면 이 인덱스들을 모두 \",t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"logs-*/_search\")),\" 명령으로 한꺼번에 검색이 가능합니다. 특히 시간순으로 따라 쌓이는 로그 데이터를 다룰 때는 인덱스를 일단위 등으로 구분하는것이 좋습니다. 나중에 필드 구조가 변경되거나 크기가 커져서 샤드 설정을 변경하거나 할 때 더욱 용이합니다.\"),\"\\n\",t().createElement(l.p,null,\"여러 인덱스를 검색할때는 쉼표\",t().createElement(l.code,{display:\"inline\"},\",\"),\" 로 나열하거나 와일드카드 \",t().createElement(l.code,{display:\"inline\"},\"*\"),\" 문자로 묶을 수 있습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},\"GET logs-2018-01,2018-02,2018-03/_search\\n\")),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},\"GET logs-2018-*/_search\\n\")),\"\\n\",t().createElement(o,{color:\"danger\"},t().createElement(l.p,null,\"인덱스명 대신 \",t().createElement(l.code,{display:\"inline\"},\"_all\"),\" 지정자를 사용하여 \",t().createElement(l.code,{display:\"inline\"},\"GET _all/_search\"),\" 와 같이 실행하면 클러스터에 있는 모든 인덱스를 대상으로 검색이 가능합니다. 하지만 \",t().createElement(l.code,{display:\"inline\"},\"_all\"),\"은 시스템 사용을 위한 인덱스 같은 곳의 데이터까지 접근하여 불필요한 작업 부하를 초래하므로 \",t().createElement(l.code,{display:\"inline\"},\"_all\"),\" 은 가능하면 사용하지 않도록 합니다.\")))}};function c(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),r})()));","frontmatter":{"id":"esG7-04-04-search-api","slug":"/krEsguide7/esG7-04-04-search-api","title":"4.4 검색 - _search API","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["data","api","REST","Bulk"],"link":"file:///Users/kimjmin/git/docs-kr/esguide7","linkPath":"04-data/04-04-search-api.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}