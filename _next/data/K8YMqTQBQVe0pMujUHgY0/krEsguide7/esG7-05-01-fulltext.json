{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},a={};function l(e){var n=a[e];if(void 0!==n)return n.exports;var r=a[e]={exports:{}};return t[e](r,r.exports,l),r.exports}l.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return l.d(n,{a:n}),n},l.d=(e,n)=>{for(var t in n)l.o(n,t)&&!l.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},l.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),l.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var r={};return(()=>{l.r(r),l.d(r,{default:()=>a});var e=l(825),n=l(24),t=l.n(n);const a=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=Object.assign({},(0,e.useMDXComponents)(),n.components),l=a.wrapper;return l?t().createElement(l,n,t().createElement(r)):r();function r(){var a=Object.assign({h2:\"h2\",p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\"},(0,e.useMDXComponents)(),n.components),l=a.DocTabs,r=a.DocTab,s=a.DocLink;return s||c(\"DocLink\",!0),r||c(\"DocTab\",!0),l||c(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(a.h2,{id:\"51-풀-텍스트-쿼리---full-text-query\"},\"5.1 풀 텍스트 쿼리 - Full Text Query\"),\"\\n\",t().createElement(a.p,null,\"Elastcisearch 검색에 사용되는 주요 쿼리들을 살펴보도록 하겠습니다. 예제들을 실행하기 위해 \",t().createElement(a.strong,null,\"my_index\"),\" 인덱스에 다음의 5개 도큐먼트를 먼저 입력하도록 하겠습니다.\"),\"\\n\",t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'POST my_index/_bulk\\n{\"index\":{\"_id\":1}}\\n{\"message\":\"The quick brown fox\"}\\n{\"index\":{\"_id\":2}}\\n{\"message\":\"The quick brown fox jumps over the lazy dog\"}\\n{\"index\":{\"_id\":3}}\\n{\"message\":\"The quick brown fox jumps over the quick dog\"}\\n{\"index\":{\"_id\":4}}\\n{\"message\":\"Brown fox brown dog\"}\\n{\"index\":{\"_id\":5}}\\n{\"message\":\"Lazy jumping dog\"}\\n')),\"\\n\",t().createElement(a.p,null,\"이후에 나올 예제들을 확인하기 위해 위에 색인된 도큐먼트들의 message 필드 값의 내용들은 다른 에디터나 노트 등에 적어놓고 같이 보는 것이 편리합니다.\"),\"\\n\",t().createElement(a.h2,{id:\"match_all\"},\"match_all\"),\"\\n\",t().createElement(a.p,null,\"match_all 은 별다른 조건 없이 해당 인덱스의 모든 도큐먼트를 검색하는 쿼리입니다. 검색 시 쿼리를 넣지 않으면 elasticsearch는 자동으로 match_all을 적용해서 해당 인덱스의 모든 도큐먼트를 검색합니다. 다음 두 예제는 결과가 동일합니다.\"),\"\\n\",t().createElement(l,null,t().createElement(r,{name:\"쿼리 없이 실행\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},\"GET my_index/_search\\n\"))),t().createElement(r,{name:\"match_all 쿼리로 실행\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\":{\\n    \"match_all\":{ }\\n  }\\n}\\n')))),\"\\n\",t().createElement(a.h2,{id:\"match\"},\"match\"),\"\\n\",t().createElement(a.p,null,\"match 쿼리는 풀 텍스트 검색에 사용되는 가장 일반적인 쿼리입니다. 다음은 match 쿼리를 이용하여 my_index 인덱스의 message 필드에 \",t().createElement(a.strong,null,\"dog\"),\" 가 포함되어 있는 모든 문서를 검색합니다.\"),\"\\n\",t().createElement(l,null,t().createElement(r,{name:\"request\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"message\": \"dog\"\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 4,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.35847884,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 0.35847884,\\n        \"_source\" : {\\n          \"message\" : \"Lazy jumping dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"4\",\\n        \"_score\" : 0.32951736,\\n        \"_source\" : {\\n          \"message\" : \"Brown fox brown dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 0.23470737,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.23470737,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the quick dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(a.p,null,\"dog가 포함된 총 4개의 도큐먼트가 검색 결과로 나타납니다.\"),\"\\n\",t().createElement(a.p,null,\"match 검색에 여러 개의 검색어를 집어넣게 되면 디폴트로 \",t().createElement(a.strong,null,\"OR\"),\" 조건으로 검색이 되어 입력된 검색어 별로 하나라도 포함된 모든 문서를 모두 검색합니다. 다음은 검색어로 \",t().createElement(a.strong,null,\"quick dog\"),\" 를 검색 한 결과입니다.\"),\"\\n\",t().createElement(l,null,t().createElement(r,{name:\"request\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"message\": \"quick dog\"\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 2,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 5,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.8762741,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.8762741,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the quick dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 0.6744513,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_score\" : 0.6173784,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 0.35847884,\\n        \"_source\" : {\\n          \"message\" : \"Lazy jumping dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"4\",\\n        \"_score\" : 0.32951736,\\n        \"_source\" : {\\n          \"message\" : \"Brown fox brown dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(a.p,null,\"quick과 dog중 어떤 단어라도 포함한 도큐먼트 총 5개가 검색되었습니다.\"),\"\\n\",t().createElement(a.p,null,\"검색어가 여럿일 때 검색 조건을 \",t().createElement(a.strong,null,\"OR\"),\" 가 아닌 \",t().createElement(a.strong,null,\"AND\"),\" 로 바꾸려면 \",t().createElement(a.code,{display:\"inline\"},\"operator\"),\" 옵션을 사용할 수 있습니다. 이 경우 문법이 조금 달라지는데,\\n\",t().createElement(a.code,{display:\"inline\"},\"<필드명>: <검색어>\"),\"\\n형식으로 하던 것을\\n\",t().createElement(a.code,{display:\"inline\"},'<필드명>: { \"query\":<검색어>, \"operator\": }'),\"\\n와 같이 입력해야 합니다. \",t().createElement(a.strong,null,\"quick dog\"),\" 를 \",t().createElement(a.strong,null,\"AND\"),\" 조건으로 검색하려면 다음과 같습니다.\"),\"\\n\",t().createElement(l,null,t().createElement(r,{name:\"request\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"message\": {\\n        \"query\": \"quick dog\",\\n        \"operator\": \"and\"\\n      }\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 6,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.8762741,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.8762741,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the quick dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 0.6744513,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(a.h2,{id:\"match_phrase\"},\"match_phrase\"),\"\\n\",t().createElement(a.p,null,\"match 쿼리에서 quick 과 dog 검색어를 AND 조건으로 검색하는 방법을 알아보았습니다. 그런데 \",t().createElement(a.strong,null,'\"quick dog\"'),\" 라는 구문을 공백을 포함해 정확히 일치하는 내용을 검색하려면 어떻게 해야 할까요? 바로 \",t().createElement(a.strong,null,\"match_phrase\"),\" 쿼리를 사용하면 됩니다. \",t().createElement(a.strong,null,\"match_phrase\"),\" 쿼리는 입력된 검색어를 순서까지 고려하여 검색을 수행합니다. 다음은 \",t().createElement(a.strong,null,\"lazy dog\"),\" 라는 구문을 검색하는 match_phrase 쿼리입니다.\"),\"\\n\",t().createElement(l,null,t().createElement(r,{name:\"request\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"match_phrase\": {\\n      \"message\": \"lazy dog\"\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 1,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.9489645,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 0.9489645,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(a.p,null,t().createElement(a.strong,null,'\"lazy dog\"'),\" 라는 정확한 문장이 포함된 도큐먼트 1개만 검색이 되었습니다.\"),\"\\n\",t().createElement(a.p,null,\"match_phrase 쿼리는 \",t().createElement(a.code,{display:\"inline\"},\"slop\"),\" 이라는 옵션을 이용하여 \",t().createElement(a.code,{display:\"inline\"},\"slop\"),\"에 지정된 값 만큼 단어 사이에 다른 검색어가 끼어드는 것을 허용할 수 있습니다. \",t().createElement(a.code,{display:\"inline\"},\"slop\"),\"을 1로 하고 검색을 하면 다음과 같은 결과가 나옵니다.\"),\"\\n\",t().createElement(l,null,t().createElement(r,{name:\"request\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"match_phrase\": {\\n      \"message\": {\\n        \"query\": \"lazy dog\",\\n        \"slop\": 1\\n      }\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 3,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 1.0110221,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 1.0110221,\\n        \"_source\" : {\\n          \"message\" : \"Lazy jumping dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 0.9489645,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(a.p,null,\"slop의 크기를 1로 했기 때문에 lazy와dog 사이에 jumping이 있는 \",t().createElement(a.strong,null,'\"Lazy jumping dog\"'),\" 값도 검색이 됩니다. slop을 2로 한다면 아마도 lazy jumping brow dog 같은 문장도 검색에 포함될 수 있을 것입니다.\"),\"\\n\",t().createElement(a.p,null,\"이처럼 match_phrase 쿼리와 slop을 이용하면 정확도를 조절 해 가며 원하는 검색 결과의 범위를 넓힐 수 있습니다. slop을 너무 크게 하면 검색 범위가 넓어져 관련이 없는 결과가 나타날 확률도 높아지기 때문에 1 이상은 사용하지 않는 것을 권장 드립니다.\"),\"\\n\",t().createElement(a.h2,{id:\"query_string\"},\"query_string\"),\"\\n\",t().createElement(a.p,null,t().createElement(s,{id:\"esG7-04-04-search-api\",text:\"4.4 검색 API\"}),\" 장에서 URL의 q 파라메터를 이용해서 검색을 수행하는 것을 설명했습니다. URL검색에 사용하는 루씬의 검색 문법을 본문 검색에 이용하고 싶을 때 query_string 쿼리를 사용할 수 있습니다.\"),\"\\n\",t().createElement(a.p,null,\"다음은 message 필드에서 \",t().createElement(a.strong,null,\"lazy\"),\"와 \",t().createElement(a.strong,null,\"jumping\"),\"을 모두 포함하거나 또는 \",t().createElement(a.strong,null,'\"quick dog\"'),\" 구문을 포함하는 도큐먼트를 검색하는 쿼리입니다. match_phrase 처럼 구문 검색을 할 때는 검색할 구문을 쌍따옴표 \",t().createElement(a.code,{display:\"inline\"},'\"'),\" 안에 넣습니다.\"),\"\\n\",t().createElement(l,null,t().createElement(r,{name:\"request\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"query_string\": {\\n      \"default_field\": \"message\",\\n      \"query\": \"(jumping AND lazy) OR \\\\\"quick dog\\\\\"\"\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 3,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 2.818369,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 2.818369,\\n        \"_source\" : {\\n          \"message\" : \"Lazy jumping dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.67445135,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the quick dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(a.p,null,'\"Lazy jumping dog\" 도큐먼트와 \"quick dog\" 값을 포함하는 도큐먼트 두개가 결과로 리턴된 것을 확인할 수 있습니다.'))}};function c(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),r})()));","frontmatter":{"id":"esG7-05-01-fulltext","slug":"/krEsguide7/esG7-05-01-fulltext","title":"5.1 풀텍스트 쿼리 - Full Text Query","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["query","fulltext","match"],"link":"file:///Users/kimjmin/git/docs-kr/esguide7","linkPath":"05-search/05-01-fulltext.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}