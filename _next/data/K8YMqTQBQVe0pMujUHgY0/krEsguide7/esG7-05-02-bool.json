{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},l={};function r(e){var n=l[e];if(void 0!==n)return n.exports;var a=l[e]={exports:{}};return t[e](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var a={};return(()=>{r.r(a),r.d(a,{default:()=>l});var e=r(825),n=r(24),t=r.n(n);const l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),n.components),r=l.wrapper;return r?t().createElement(r,n,t().createElement(a)):a();function a(){var l=Object.assign({p:\"p\",strong:\"strong\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",img:\"img\"},(0,e.useMDXComponents)(),n.components),r=l.DocTabs,a=l.DocTab;return a||o(\"DocTab\",!0),r||o(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(l.p,null,\"앞의 query_string 쿼리는 여러 조건을 조합하기에는 용이한 문법이지만 옵션이 한정되어 있습니다. 본문 검색에서 여러 쿼리를 조합하기 위해서는 상위에 \",t().createElement(l.strong,null,\"bool\"),\" 쿼리를 사용하고 그 안에 다른 쿼리들을 넣는 식으로 사용이 가능합니다. bool 쿼리는 다음의 4개의 인자를 가지고 있으며 그 인자 안에 다른 쿼리들을 배열로 넣는 방식으로 동작합니다.\"),\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"must\"),\" : 쿼리가 참인 도큐먼트들을 검색합니다.\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"must_not\"),\" : 쿼리가 거짓인 도큐먼트들을 검색합니다.\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"should\"),\" : 검색 결과 중 이 쿼리에 해당하는 도큐먼트의 점수를 높입니다.\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"filter\"),\" : 쿼리가 참인 도큐먼트를 검색하지만 스코어를 계산하지 않습니다. must 보다 검색 속도가 빠르고 캐싱이 가능합니다.\"),\"\\n\"),\"\\n\",t().createElement(l.p,null,\"사용 방법은 다음과 같습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET <인덱스명>/_search\\n{\\n  \"query\": {\\n    \"bool\": {\\n      \"must\": [\\n        { <쿼리> }, …\\n      ],\\n      \"must_not\": [\\n        { <쿼리> }, …\\n      ],\\n      \"should\": [\\n        { <쿼리> }, …\\n      ],\\n      \"filter\": [\\n        { <쿼리> }, …\\n      ]\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(l.p,null,'다음은 단어 \"quick\"과 구문 \"lazy dog\"가 포함된 모든 문서를 검색하는 쿼리입니다.'),\"\\n\",t().createElement(r,null,t().createElement(a,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"bool\": {\\n      \"must\": [\\n        {\\n          \"match\": {\\n            \"message\": \"quick\"\\n          }\\n        },\\n        {\\n          \"match_phrase\": {\\n            \"message\": \"lazy dog\"\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n'))),t().createElement(a,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 2,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 1,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 1.3887084,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 1.3887084,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,'다음은 단어 \"quick\" 그리고 구문 \"lazy dog\" 가 하나도 포함되지 않은 문서를 검색합니다.'),\"\\n\",t().createElement(r,null,t().createElement(a,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"bool\": {\\n      \"must_not\": [\\n        {\\n          \"match\": {\\n            \"message\": \"quick\"\\n          }\\n        },\\n        {\\n          \"match_phrase\": {\\n            \"message\": \"lazy dog\"\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n'))),t().createElement(a,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 2,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.0,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"4\",\\n        \"_score\" : 0.0,\\n        \"_source\" : {\\n          \"message\" : \"Brown fox brown dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 0.0,\\n        \"_source\" : {\\n          \"message\" : \"Lazy jumping dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"이렇게 bool 쿼리를 이용해서 복합적인 검색 기능을 구현할 수 있습니다. 특히 bool쿼리는 것은 이후에 설명할 정확도(Relevancy)의 예제를 위해서도 필요합니다.\"),\"\\n\",t().createElement(l.p,null,\"bool 쿼리의 \",t().createElement(l.strong,null,\"must\"),\", \",t().createElement(l.strong,null,\"should\"),\" 등은 표준 SQL의 \",t().createElement(l.strong,null,\"AND\"),\", \",t().createElement(l.strong,null,\"OR\"),\" 등과 \",t().createElement(l.strong,null,\"유사하지만 정확히 같지는 않습니다.\"),\" must는 SQL의 \",t().createElement(l.strong,null,\"AND\"),\" 연산자와 유사하게 동작하지만 bool 쿼리에는 표준 SQL의 \",t().createElement(l.strong,null,\"OR\"),\" 와 정확히 일치하게 동작한다고 할 수 있는 연산자는 없어서 처음에는 이해하기가 조금 어렵습니다.\"),\"\\n\",t().createElement(l.p,null,\"표준 SQL의 AND, OR 조건 들은 2개의 조건값에 대한 \",t().createElement(l.strong,null,\"이항 연산자\"),\" 입니다. 하지만 Elasticsearch의 must, must_not, should 등은 내부에 있는 각각의 쿼리들에 대해 이 쿼리는 참 또는 거짓으로 적용하는 \",t().createElement(l.strong,null,\"단항 연산자\"),\"라고 생각을 하면 조금 더 이해하기 쉽습니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/05-02_sql_bool_1.png\",alt:\"표준 SQL 과 Elasticsearch Bool 쿼리 비교\"})),\"\\n\",t().createElement(l.p,null,\"**  \",t().createElement(l.code,{display:\"inline\"},\"(A or B) and (not C)\"),\"** 에 대한 쿼리를 하려면 elasticsearch의 경우 다음처럼 \",t().createElement(l.strong,null,\"A\"),\"와 \",t().createElement(l.strong,null,\"B\"),\"의 OR 조건의 match 쿼리로 하여 must 안에 넣고 \",t().createElement(l.strong,null,\"C\"),\"를 must_not에 넣으면 됩니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/05-02_sql_bool_2.png\",alt:\"표준 SQL 과 Elasticsearch Bool 쿼리 비교\"})))}};function o(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),a})()));","frontmatter":{"id":"esG7-05-02-bool","slug":"/krEsguide7/esG7-05-02-bool","title":"5.2 복합 쿼리 - Bool Query","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["query","bool","must","should","filter"],"link":"file:///Users/kimjmin/git/docs-kr/esguide7","linkPath":"05-search/05-02-bool.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}