{"pageProps":{"bundle":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],t):\"object\"==typeof exports?exports.MDXContent=t(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=t(e.mdxJsReact,e.React)}(this,((e,t)=>(()=>{\"use strict\";var n={24:e=>{e.exports=t},825:t=>{t.exports=e}},r={};function l(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,l),a.exports}l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),l.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var a={};return(()=>{l.r(a),l.d(a,{default:()=>r});var e=l(825),t=l(24),n=l.n(t);const r=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=Object.assign({},(0,e.useMDXComponents)(),t.components),l=r.wrapper;return l?n().createElement(l,t,n().createElement(a)):a();function a(){var r=Object.assign({p:\"p\",img:\"img\",strong:\"strong\"},(0,e.useMDXComponents)(),t.components);return n().createElement(n().Fragment,null,n().createElement(r.p,null,\"데이터 시스템에 다음과 같은 문서들을 저장한다고 가정 해 보겠습니다.\"),\"\\n\",n().createElement(r.p,null,n().createElement(r.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/06-01_rdbtable_1.png\",alt:\"RDB 테이블\"})),\"\\n\",n().createElement(r.p,null,\"일반적으로 오라클이나 MySQL 같은 관계형 DB에서는 위 내용을 보이는 대로 테이블 구조로 저장을 합니다. 만약에 위 테이블에서 Text 에 \",n().createElement(r.strong,null,\"fox\"),\"가 포함된 행들을 가져온다고 하면 다음과 같이 Text 열을 한 줄씩 찾아 내려가면서 \",n().createElement(r.strong,null,\"fox\"),\"가 있으면 가져오고 없으면 넘어가는 식으로 데이터를 가져 올 것입니다.\"),\"\\n\",n().createElement(r.p,null,n().createElement(r.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/06-01_like_search.png\",alt:\"테이블에서 한줄씩 like 검색\"})),\"\\n\",n().createElement(r.p,null,\"전통적인 RDBMS 에서는 위와 같이 \",n().createElement(r.strong,null,\"like\"),\" 검색을 사용하기 때문에 데이터가 늘어날수록 검색해야 할 대상이 늘어나 시간도 오래 걸리고, row 안의 내용을 모두 읽어야 하기 때문에 기본적으로 속도가 느립니다. Elasticsearch는 데이터를 저장할 때 다음과 같이 **역 인덱스(inverted index)**라는 구조를 만들어 저장합니다.\"),\"\\n\",n().createElement(r.p,null,n().createElement(r.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/06-01_invt_index.png\",alt:\"역인덱스 inverted index 구조\"})),\"\\n\",n().createElement(r.p,null,\"이 역 인덱스는 \",n().createElement(r.strong,null,\"책의 맨 뒤에 있는\"),\" 주요 키워드에 대한 내용이 몇 페이지에 있는지 볼 수 있는 \",n().createElement(r.strong,null,\"찾아보기 페이지\"),\"에 비유할 수 있습니다. Elasticsearch에서는 추출된 각 키워드를 \",n().createElement(r.strong,null,\"텀(term)\"),\" 이라고 부릅니다. 이렇게 역 인덱스가 있으면 \",n().createElement(r.strong,null,\"fox\"),\"를 포함하고 있는 도큐먼트들의 \",n().createElement(r.strong,null,\"id\"),\"를 바로 얻어올 수 있습니다.\"),\"\\n\",n().createElement(r.p,null,n().createElement(r.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/06-01_invt_index_one.png\",alt:\"\"})),\"\\n\",n().createElement(r.p,null,\"Elasticsearch는 데이터가 늘어나도 찾아가야 할 행이 늘어나는 것이 아니라 역 인덱스가 가리키는 id의 배열값이 추가되는 것 뿐이기 때문에 큰 속도의 저하 없이 빠른 속도로 검색이 가능합니다. 이런 역 인덱스를 데이터가 저장되는 과정에서 만들기 때문에 Elasticsearch는 데이터를 입력할 때 저장이 아닌 \",n().createElement(r.strong,null,\"색인\"),\"을 한다고 표현합니다.\"))}}})(),a})()));","frontmatter":{"id":"esG7-06-01-inverted-index","slug":"/krEsguide7/esG7-06-01-inverted-index","title":"6.1 역 인덱스 - Inverted Index","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["indexing","text","analysis","inverted index"],"link":"file:///Users/kimjmin/git/docs-kr/esguide7","linkPath":"06-text-analysis/06-01-inverted-index.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}