{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},l={};function a(e){var n=l[e];if(void 0!==n)return n.exports;var s=l[e]={exports:{}};return t[e](s,s.exports,a),s.exports}a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var s={};return(()=>{a.r(s),a.d(s,{default:()=>l});var e=a(825),n=a(24),t=a.n(n);const l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),n.components),a=l.wrapper;return a?t().createElement(a,n,t().createElement(s)):s();function s(){var l=Object.assign({p:\"p\",h2:\"h2\",code:\"code\",strong:\"strong\",pre:\"pre\",img:\"img\",a:\"a\",h3:\"h3\"},(0,e.useMDXComponents)(),n.components),a=l.DocTabs,s=l.DocTab,r=l.DocCallOut,c=l.DocLink;return r||o(\"DocCallOut\",!0),c||o(\"DocLink\",!0),s||o(\"DocTab\",!0),a||o(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(l.p,null,\"Elasticsearch 에는 애널라이저를 조합하고 그 동작을 자세히 확인할 수 있는 API 들이 있습니다. 계속해서 애널라이저와 관련된 기능들에 대해 살펴보겠습니다.\"),\"\\n\",t().createElement(l.h2,{id:\"631-_analyze-api\"},\"6.3.1 _analyze API\"),\"\\n\",t().createElement(l.p,null,\"Elasticsearch 에서는 분석된 문장을 \",t().createElement(l.code,{display:\"inline\"},\"_analyze\"),\" API를 이용해서 확인할 수 있습니다. 토크나이저는 \",t().createElement(l.code,{display:\"inline\"},\"tokenizer\"),\", 토큰 필터는 \",t().createElement(l.code,{display:\"inline\"},\"filter\"),\" 항목의 값으로 입력하면 됩니다. 토크나이저는 하나만 적용되기 때문에 바로 입력하고, 토큰필터는 여러개를 적용할 수 있기 때문에 \",t().createElement(l.strong,null,\"[ ]\"),\" 안에 배열 형식으로 입력합니다. \",t().createElement(l.strong,null,'\"The quick brown fox jumps over the lazy dog\"'),\" 문장을 \",t().createElement(l.code,{display:\"inline\"},\"whitespace\"),\" 토크나이저와 \",t().createElement(l.code,{display:\"inline\"},\"lowercase\"),\", \",t().createElement(l.code,{display:\"inline\"},\"stop\"),\", \",t().createElement(l.code,{display:\"inline\"},\"snowball\"),\" 토큰 필터를 적용하면 다음과 같은 결과를 확인할 수 있습니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET _analyze\\n{\\n  \"text\": \"The quick brown fox jumps over the lazy dog\",\\n  \"tokenizer\": \"whitespace\",\\n  \"filter\": [\\n    \"lowercase\",\\n    \"stop\",\\n    \"snowball\"\\n  ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"quick\",\\n      \"start_offset\" : 4,\\n      \"end_offset\" : 9,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"brown\",\\n      \"start_offset\" : 10,\\n      \"end_offset\" : 15,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    },\\n    {\\n      \"token\" : \"fox\",\\n      \"start_offset\" : 16,\\n      \"end_offset\" : 19,\\n      \"type\" : \"word\",\\n      \"position\" : 3\\n    },\\n    {\\n      \"token\" : \"jump\",\\n      \"start_offset\" : 20,\\n      \"end_offset\" : 25,\\n      \"type\" : \"word\",\\n      \"position\" : 4\\n    },\\n    {\\n      \"token\" : \"over\",\\n      \"start_offset\" : 26,\\n      \"end_offset\" : 30,\\n      \"type\" : \"word\",\\n      \"position\" : 5\\n    },\\n    {\\n      \"token\" : \"lazi\",\\n      \"start_offset\" : 35,\\n      \"end_offset\" : 39,\\n      \"type\" : \"word\",\\n      \"position\" : 7\\n    },\\n    {\\n      \"token\" : \"dog\",\\n      \"start_offset\" : 40,\\n      \"end_offset\" : 43,\\n      \"type\" : \"word\",\\n      \"position\" : 8\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"토크나이저, 토큰필터를 이용해 처리된 \",t().createElement(l.code,{display:\"inline\"},'\"token\" : \"jump\"'),\", \",t().createElement(l.code,{display:\"inline\"},'\"token\" : \"lazi\"'),\" 같은 결과들을 확인할 수 있습니다.\"),\"\\n\",t().createElement(l.p,null,\"여러 토큰 필터를 입력 할 때는 순서가 중요하며 만약에 \",t().createElement(l.code,{display:\"inline\"},\"stop\"),\" 토큰 필터를 \",t().createElement(l.code,{display:\"inline\"},\"lowercase\"),\" 보다 먼저 놓게 되면 \",t().createElement(l.code,{display:\"inline\"},\"stop\"),' 토큰필터 처리시 대문자로 시작하는 **\"The\"**는 불용어로 간주되지 않아 그냥 남아있게 됩니다. 그 후에 ',t().createElement(l.code,{display:\"inline\"},\"lowercase\"),'가 적용되어 소문자 **\"the\"**가 최종 검색 텀으로 역 색인에 남아있게 됩니다.'),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET _analyze\\n{\\n  \"text\": \"The quick brown fox jumps over the lazy dog\",\\n  \"tokenizer\": \"whitespace\",\\n  \"filter\": [\\n    \"stop\",\\n    \"lowercase\",\\n    \"snowball\"\\n  ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"the\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"quick\",\\n      \"start_offset\" : 4,\\n      \"end_offset\" : 9,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"brown\",\\n      \"start_offset\" : 10,\\n      \"end_offset\" : 15,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    },\\n    {\\n      \"token\" : \"fox\",\\n      \"start_offset\" : 16,\\n      \"end_offset\" : 19,\\n      \"type\" : \"word\",\\n      \"position\" : 3\\n    },\\n    {\\n      \"token\" : \"jump\",\\n      \"start_offset\" : 20,\\n      \"end_offset\" : 25,\\n      \"type\" : \"word\",\\n      \"position\" : 4\\n    },\\n    {\\n      \"token\" : \"over\",\\n      \"start_offset\" : 26,\\n      \"end_offset\" : 30,\\n      \"type\" : \"word\",\\n      \"position\" : 5\\n    },\\n    {\\n      \"token\" : \"lazi\",\\n      \"start_offset\" : 35,\\n      \"end_offset\" : 39,\\n      \"type\" : \"word\",\\n      \"position\" : 7\\n    },\\n    {\\n      \"token\" : \"dog\",\\n      \"start_offset\" : 40,\\n      \"end_offset\" : 43,\\n      \"type\" : \"word\",\\n      \"position\" : 8\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"애널라이저는 \",t().createElement(l.code,{display:\"inline\"},\"_analyze\"),\" API에서 \",t().createElement(l.code,{display:\"inline\"},\"analyzer\"),\" 항목으로 적용해서 사용이 가능합니다. 애널라이저는 \",t().createElement(l.strong,null,\"캐릭터 필터\"),\", \",t().createElement(l.strong,null,\"토크나이저\"),\" 그리고 \",t().createElement(l.strong,null,\"토큰 필터\"),\"들을 조합해서 사용자 정의 애널라이저를 만들 수도 있고, Elasticsearch 에 사전에 정의되어 있어 바로 사용 가능 한 애널라이저들도 있습니다. 앞서 실행한 \",t().createElement(l.code,{display:\"inline\"},\"whitespace\"),\" 토크나이저 그리고 \",t().createElement(l.code,{display:\"inline\"},\"lowercase\"),\", \",t().createElement(l.code,{display:\"inline\"},\"stop\"),\", \",t().createElement(l.code,{display:\"inline\"},\"snowball\"),\" 토큰필터들을 조합한 것 것이 \",t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"snowball\")),\" 애널라이저 입니다. 다음은 \",t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"snowball\")),\" 애널라이저를 적용해서 \",t().createElement(l.strong,null,'\"The quick brown fox jumps over the lazy dog\"'),\" 문장을 분석한 예제입니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET _analyze\\n{\\n  \"text\": \"The quick brown fox jumps over the lazy dog\",\\n  \"analyzer\": \"snowball\"\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"quick\",\\n      \"start_offset\" : 4,\\n      \"end_offset\" : 9,\\n      \"type\" : \"<ALPHANUM>\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"brown\",\\n      \"start_offset\" : 10,\\n      \"end_offset\" : 15,\\n      \"type\" : \"<ALPHANUM>\",\\n      \"position\" : 2\\n    },\\n    {\\n      \"token\" : \"fox\",\\n      \"start_offset\" : 16,\\n      \"end_offset\" : 19,\\n      \"type\" : \"<ALPHANUM>\",\\n      \"position\" : 3\\n    },\\n    {\\n      \"token\" : \"jump\",\\n      \"start_offset\" : 20,\\n      \"end_offset\" : 25,\\n      \"type\" : \"<ALPHANUM>\",\\n      \"position\" : 4\\n    },\\n    {\\n      \"token\" : \"over\",\\n      \"start_offset\" : 26,\\n      \"end_offset\" : 30,\\n      \"type\" : \"<ALPHANUM>\",\\n      \"position\" : 5\\n    },\\n    {\\n      \"token\" : \"lazi\",\\n      \"start_offset\" : 35,\\n      \"end_offset\" : 39,\\n      \"type\" : \"<ALPHANUM>\",\\n      \"position\" : 7\\n    },\\n    {\\n      \"token\" : \"dog\",\\n      \"start_offset\" : 40,\\n      \"end_offset\" : 43,\\n      \"type\" : \"<ALPHANUM>\",\\n      \"position\" : 8\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"snowball\")),\" 애널라이저를 사용한 결과는 앞의 \",t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"whitespace\")),\" 토크나이저 그리고 \",t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"lowercase\")),\", \",t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"stop\")),\", \",t().createElement(l.strong,null,t().createElement(l.code,{display:\"inline\"},\"snowball\")),\" 토큰필터를 사용한 결과와 동일하게 나타납니다.\"),\"\\n\",t().createElement(l.p,null,'인덱스의 매핑(mappings) 설정에 snowball 애널라이저를 적용하고 \"The quick brown fox jumps over the lazy dog\" 값을 색인하면 ',t().createElement(l.strong,null,\"fox\"),\", \",t().createElement(l.strong,null,\"jump\"),\", \",t().createElement(l.strong,null,\"lazi\"),\" 등의 단어가 검색 텀으로 저장됩니다. \",t().createElement(l.code,{display:\"inline\"},\"match\"),\" 쿼리로 검색을 수행하면 입력한 검색어도 앞에서 적용한 \",t().createElement(l.code,{display:\"inline\"},\"snowball\"),\" 애널라이저를 똑같이 거치게 됩니다. \",t().createElement(l.strong,null,\"jumps\"),\" 또는 \",t().createElement(l.strong,null,\"jumping\"),\" 등으로 검색을 수행하면 \",t().createElement(l.code,{display:\"inline\"},\"lowercase\"),\", \",t().createElement(l.code,{display:\"inline\"},\"snowball\"),\"토큰 필터 등이 적용되어 검색어를 \",t().createElement(l.strong,null,\"jump\"),\"로 바꾸어 검색합니다.\"),\"\\n\",t().createElement(l.p,null,\"인덱스에 애널라이저는 아래 예제와 같이 지정합니다. 다음은 my_index2 인덱스의 message 필드에 snowball 애널라이저를 적용한 예제입니다. 매핑에 대해서는 다음 장에서 더 자세히 설명하겠습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'PUT my_index2\\n{\\n  \"mappings\": {\\n    \"properties\": {\\n      \"message\": {\\n        \"type\": \"text\",\\n        \"analyzer\": \"snowball\"\\n      }\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(r,{color:\"warning\"},t().createElement(l.p,null,\"6.x 이전 버전의 매핑에서는 \",t().createElement(l.code,{display:\"inline\"},'\"mappings\"'),\" |\",t().createElement(l.code,{display:\"inline\"},'\"properties\"'),\"  사이에  도큐먼트 타입 값이 들어갑니다.\")),\"\\n\",t().createElement(l.p,null,\"위에서 생성한 my_index2 인덱스에 \",t().createElement(l.code,{display:\"inline\"},'\"message\": \"The quick brown fox jumps over the lazy dog\"'),\" 값을 넣고 \",t().createElement(l.code,{display:\"inline\"},\"jumping\"),\" 으로 검색을 해 보도록 하겠습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'PUT my_index2/_doc/1\\n{\\n  \"message\": \"The quick brown fox jumps over the lazy dog\"\\n}\\n')),\"\\n\",t().createElement(l.p,null,\"match 쿼리로 \",t().createElement(l.strong,null,\"jump\"),\", \",t().createElement(l.strong,null,\"jumping\"),\" 또는 \",t().createElement(l.strong,null,\"jumps\"),\" 중 어떤 값으로 검색 해도 결과가 나타납니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index2/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"message\": \"jumping\"\\n    }\\n  }\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 1,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.2876821,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index2\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_score\" : 0.2876821,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/06-03_search_jump.png\",alt:\"jumping 을 검색 할 때 실제로 jump 로 검색됩니다.\"})),\"\\n\",t().createElement(l.h2,{id:\"632-term-쿼리\"},\"6.3.2 Term 쿼리\"),\"\\n\",t().createElement(l.p,null,\"Elasticsearch에서 제공하는 쿼리 중에는 \",t().createElement(l.code,{display:\"inline\"},\"term\"),\" 쿼리가 있습니다. \",t().createElement(l.code,{display:\"inline\"},\"match\"),\" 쿼리와 문법은 유사하지만 \",t().createElement(l.code,{display:\"inline\"},\"term\"),\" 쿼리는 입력한 검색어는 애널라이저를 적용하지 않고 입력된 검색어 그대로 일치하는 텀을 찾습니다. 따라서 \",t().createElement(l.strong,null,\"jumps\"),\", \",t().createElement(l.strong,null,\"jumping\"),\" 으로 검색하면 결과가 나타나지 않고 \",t().createElement(l.strong,null,\"jump\"),\"로 검색해야 결과가 나타납니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index2/_search\\n{\\n  \"query\": {\\n    \"term\": {\\n      \"message\": \"jumps\"\\n    }\\n  }\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 0,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 0,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : null,\\n    \"hits\" : [ ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index2/_search\\n{\\n  \"query\": {\\n    \"term\": {\\n      \"message\": \"jump\"\\n    }\\n  }\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 0,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 1,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.2876821,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index2\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_score\" : 0.2876821,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"이렇게 도큐먼트의 원문은 \",t().createElement(l.strong,null,\"jumps\"),\" 이지만 어떤 쿼리를 사용하느냐에 따라 원문과 같은 \",t().createElement(l.strong,null,\"jumps\"),\" 검색어를 넣어도 검색이 되지 않는 경우가 있습니다.\"),\"\\n\",t().createElement(r,{color:\"danger\"},t().createElement(l.p,null,\"텍스트 분석(Analysis) 과정은 검색에 사용되는 \",t().createElement(l.strong,null,\"역 인덱스\"),\"에만 관여합니다. 원본 데이터는 변하지 않으므로 쿼리 결과의 \",t().createElement(l.strong,null,\"_source\"),\" 항목에는 항상 \",t().createElement(l.strong,null,\"원본 데이터\"),\"가 나옵니다.\")),\"\\n\",t().createElement(l.p,null,\"지금까지 본 것 처럼 Elasticsearch는 데이터를 실제로 검색에 사용되는 텀(Term) 으로 분석 과정을 거쳐 저장하기 때문에 검색 시 대소문자, 단수나 복수, 원형 여부와 상관 없이 검색이 가능합니다. 이러한 Elasticsearch의 특징을 \",t().createElement(c,{id:\"esG7-05-01-fulltext\",text:\"풀 텍스트 검색(Full Text Search)\"}),\"  이라고 하며 한국어로 \",t().createElement(l.strong,null,\"전문 검색\"),\" 이라고도 합니다.\"),\"\\n\",t().createElement(l.p,null,\"앞에서 설명한 것들 외에도 elasticsearch에서 사용 가능한 애널라이저, 캐릭터 필터, 토크나이저, 토큰필터 들의 목록은 공식 \",t().createElement(l.a,{href:\"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html\"},\"홈페이지 도큐먼트\"),\"에서 확인이 가능합니다.\"),\"\\n\",t().createElement(l.h2,{id:\"633-사용자-정의-애널라이저---custom-analyzer\"},\"6.3.3 사용자 정의 애널라이저 - Custom Analyzer\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,\"_analyze API\"),\"로 애널라이저, 토크나이저, 토큰필터들의 테스트가 가능하지만, 실제로 인덱스에 저장되는 데이터의 처리에 대한 설정은 \",t().createElement(l.strong,null,\"애널라이저만 적용할 수 있습니다\"),\". 인덱스 매핑에 애널라이저를 적용 할 때 보통은 이미 정의되어 제공되는 애널라이저 보다는 토크나이저, 토큰필터 등을 조합하여 만든 **사용자 정의 애널라이저(Custom Analyzer)**를 주로 사용합니다. 이미 정의된 애널라이저들은 매핑에 정의한 text 필드의 \",t().createElement(l.strong,null,\"analyzer\"),\" 항목에 이름을 명시하기만 하면 쉽게 적용이 가능합니다.\"),\"\\n\",t().createElement(l.p,null,\"이 책에서는 사용자 정의 애널라이저만 설명하겠으니 Elasticsearch에 사전에 만들어진 애널라이저들은 \",t().createElement(l.a,{href:\"https://www.elastic.co/\"},\"https://www.elastic.co/\"),\" 홈페이지의 공식 도큐먼트를 참고하시기 바랍니다. 매핑에 아무 설정을 하지 않는 경우 디폴트로 적용되는 애널라이저는 \",t().createElement(l.strong,null,\"standard\"),\" 애널라이저 입니다.\"),\"\\n\",t().createElement(l.p,null,\"사용자 정의 애널라이저는 인덱스 \",t().createElement(l.strong,null,\"settings\"),\" 의 \",t().createElement(l.code,{display:\"inline\"},'\"index\" : { \"analysis\" :'),\" 부분에 정의합니다. 생성한 다음에는 해당 인덱스에서 \",t().createElement(l.code,{display:\"inline\"},\"GET\"),\" 또는 \",t().createElement(l.code,{display:\"inline\"},\"POST <인덱스명>/_analyze\"),\" 명령으로 사용이 가능합니다. 다음은 \",t().createElement(l.strong,null,\"my_index3\"),\" 안에 \",t().createElement(l.code,{display:\"inline\"},\"whitespace\"),\" 토큰크나이저 그리고 \",t().createElement(l.code,{display:\"inline\"},\"lowercase\"),\", \",t().createElement(l.code,{display:\"inline\"},\"stop\"),\", \",t().createElement(l.code,{display:\"inline\"},\"snowball\"),\" 토큰필터를 사용하는 \",t().createElement(l.code,{display:\"inline\"},\"my_custom_analyzer\"),\" 라는 이름의 애널라이저를 추가하는 예제입니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'PUT my_index3\\n{\\n  \"settings\": {\\n    \"index\": {\\n      \"analysis\": {\\n        \"analyzer\": {\\n          \"my_custom_analyzer\": {\\n            \"type\": \"custom\",\\n            \"tokenizer\": \"whitespace\",\\n            \"filter\": [\\n              \"lowercase\",\\n              \"stop\",\\n              \"snowball\"\\n            ]\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(l.p,null,\"이제 \",t().createElement(l.strong,null,\"my_index3\"),\" 에서 \",t().createElement(l.strong,null,\"my_custom_analyzer\"),\"를 사용할 수 있습니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index3/_analyze\\n{\\n  \"analyzer\": \"my_custom_analyzer\",\\n  \"text\": [\\n    \"The quick brown fox jumps over the lazy dog\"\\n  ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"quick\",\\n      \"start_offset\" : 4,\\n      \"end_offset\" : 9,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"brown\",\\n      \"start_offset\" : 10,\\n      \"end_offset\" : 15,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    },\\n    {\\n      \"token\" : \"fox\",\\n      \"start_offset\" : 16,\\n      \"end_offset\" : 19,\\n      \"type\" : \"word\",\\n      \"position\" : 3\\n    },\\n    {\\n      \"token\" : \"jump\",\\n      \"start_offset\" : 20,\\n      \"end_offset\" : 25,\\n      \"type\" : \"word\",\\n      \"position\" : 4\\n    },\\n    {\\n      \"token\" : \"over\",\\n      \"start_offset\" : 26,\\n      \"end_offset\" : 30,\\n      \"type\" : \"word\",\\n      \"position\" : 5\\n    },\\n    {\\n      \"token\" : \"lazi\",\\n      \"start_offset\" : 35,\\n      \"end_offset\" : 39,\\n      \"type\" : \"word\",\\n      \"position\" : 7\\n    },\\n    {\\n      \"token\" : \"dog\",\\n      \"start_offset\" : 40,\\n      \"end_offset\" : 43,\\n      \"type\" : \"word\",\\n      \"position\" : 8\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.h3,{id:\"사용자-정의-토큰필터\"},\"사용자 정의 토큰필터\"),\"\\n\",t().createElement(l.p,null,\"토크나이저, 토큰필터의 경우에도 옵션을 지정하는 경우에는 사용자 정의 토크나이저, 토큰필터로 만들어 추가해야 합니다. 다음은 \",t().createElement(l.code,{display:\"inline\"},\"stop\"),' 토큰필터에 **\"brown\"**을 불용어로 적용한 ',t().createElement(l.strong,null,\"my_stop_filter\"),\" 사용자 정의 토큰필터를 생성하고 이것을 \",t().createElement(l.strong,null,\"my_custom_analyzer\"),\"에서 사용하도록 설정 한 예제입니다.\"),\"\\n\",t().createElement(r,{color:\"warning\"},t().createElement(l.p,null,\"아래 명령 실행 전에 기존 my_index3 인덱스는 먼저 삭제해야 합니다.\")),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'PUT my_index3\\n{\\n  \"settings\": {\\n    \"index\": {\\n      \"analysis\": {\\n        \"analyzer\": {\\n          \"my_custom_analyzer\": {\\n            \"type\": \"custom\",\\n            \"tokenizer\": \"whitespace\",\\n            \"filter\": [\\n              \"lowercase\",\\n              \"my_stop_filter\",\\n              \"snowball\"\\n            ]\\n          }\\n        },\\n        \"filter\": {\\n          \"my_stop_filter\": {\\n            \"type\": \"stop\",\\n            \"stopwords\": [\\n              \"brown\"\\n            ]\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/L1VzZXJzL2tpbWptaW4vZ2l0L2RvY3Mta3IvZXNndWlkZTc/assets/06-03_custom_analyzer.png\",alt:\"filter 에서 선언한 my_stop_filter 를 analyzer 에서 사용\"})),\"\\n\",t().createElement(l.p,null,\"이제 다시 \",t().createElement(l.strong,null,\"my_custom_analyzer\"),\"를 사용해서 텍스트를 분석 해 보면 \",t().createElement(l.strong,null,\"brown\"),\"이 불용어 처리가 되어 사라진 것을 확인할 수 있습니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index3/_analyze\\n{\\n  \"analyzer\": \"my_custom_analyzer\",\\n  \"text\": [\\n    \"The quick brown fox jumps over the lazy dog\"\\n  ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"the\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"quick\",\\n      \"start_offset\" : 4,\\n      \"end_offset\" : 9,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"fox\",\\n      \"start_offset\" : 16,\\n      \"end_offset\" : 19,\\n      \"type\" : \"word\",\\n      \"position\" : 3\\n    },\\n    {\\n      \"token\" : \"jump\",\\n      \"start_offset\" : 20,\\n      \"end_offset\" : 25,\\n      \"type\" : \"word\",\\n      \"position\" : 4\\n    },\\n    {\\n      \"token\" : \"over\",\\n      \"start_offset\" : 26,\\n      \"end_offset\" : 30,\\n      \"type\" : \"word\",\\n      \"position\" : 5\\n    },\\n    {\\n      \"token\" : \"the\",\\n      \"start_offset\" : 31,\\n      \"end_offset\" : 34,\\n      \"type\" : \"word\",\\n      \"position\" : 6\\n    },\\n    {\\n      \"token\" : \"lazi\",\\n      \"start_offset\" : 35,\\n      \"end_offset\" : 39,\\n      \"type\" : \"word\",\\n      \"position\" : 7\\n    },\\n    {\\n      \"token\" : \"dog\",\\n      \"start_offset\" : 40,\\n      \"end_offset\" : 43,\\n      \"type\" : \"word\",\\n      \"position\" : 8\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.h3,{id:\"매핑에-사용자-정의-애널라이저-적용\"},\"매핑에 사용자 정의 애널라이저 적용\"),\"\\n\",t().createElement(l.p,null,\"애널라이저를 실제 인덱스에 입력할 데이터에 적용하려면 \",t().createElement(l.strong,null,\"settings\"),\" 부분에서 만든 애널라이저를 \",t().createElement(l.strong,null,\"mappings\"),\" 의 text 필드별로 지정합니다. 앞에서 만든 \",t().createElement(l.strong,null,\"my_custom_analyzer\"),\" 를 \",t().createElement(l.strong,null,\"message\"),\" 필드에 적용하는 방법은 다음과 같습니다. \",t().createElement(l.strong,null,\"setting\"),\" 부분은 위 예제와 동일합니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'PUT my_index3\\n{\\n  \"settings\": {\\n    \"index\": {\\n      \"analysis\": {\\n        \"analyzer\": {\\n          \"my_custom_analyzer\": {\\n            \"type\": \"custom\",\\n            \"tokenizer\": \"whitespace\",\\n            \"filter\": [\\n              \"lowercase\",\\n              \"my_stop_filter\",\\n              \"snowball\"\\n            ]\\n          }\\n        },\\n        \"filter\": {\\n          \"my_stop_filter\": {\\n            \"type\": \"stop\",\\n            \"stopwords\": [\\n              \"brown\"\\n            ]\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \"mappings\": {\\n    \"properties\": {\\n      \"message\": {\\n        \"type\": \"text\",\\n        \"analyzer\": \"my_custom_analyzer\"\\n      }\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(l.p,null,\"이제 \",t().createElement(l.strong,null,\"my_index\"),\" 에 \",t().createElement(l.strong,null,\"message\"),\" 필드에 입력되는 값은 위에 지정된 \",t().createElement(l.strong,null,\"my_custom_analyzer\"),\" 애널라이저가 적용됩니다. my_index의 message 필드에 값을 입력하고 검색 해 보면 \",t().createElement(l.strong,null,\"brown\"),\"은 불용어 처리가 되어 검색되지 않는 것을 확인할 수 있습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'PUT my_index3/_doc/1\\n{\\n  \"message\": \"The quick brown fox jumps over the lazy dog\"\\n}\\n')),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index3/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"message\": \"brown\"\\n    }\\n  }\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 468,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 0,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : null,\\n    \"hits\" : [ ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.h2,{id:\"634-텀-벡터---_termvectors-api\"},\"6.3.4 텀 벡터 - _termvectors API\"),\"\\n\",t().createElement(l.p,null,\"색인된 도큐먼트의 역 인덱스의 내용을 확인할 때는 도큐먼트 별로 \",t().createElement(l.strong,null,\"_termvectors\"),\" API를이용해서 확인이 가능합니다. \",t().createElement(l.code,{display:\"inline\"},\"GET <인덱스>/_termvectors/<도큐먼트id>?fields=<필드명>\"),\" 형식으로 사용하며 \",t().createElement(l.strong,null,\"6.x\"),\" 이전 버전에서는 \",t().createElement(l.code,{display:\"inline\"},\"GET <인덱스>/<도큐먼트 타입>/<도큐먼트id>/_termvectors?fields=<필드명>\"),\" 형식으로 사용합니다.\"),\"\\n\",t().createElement(l.p,null,\"다음은 앞에서 입력한 \",t().createElement(l.strong,null,\"my_index3/_doc/1\"),\" 도큐먼트의 \",t().createElement(l.strong,null,\"message\"),\" 필드를 확인하는 예제입니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},\"GET my_index3/_termvectors/1?fields=message\\n\"))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"_index\" : \"my_index3\",\\n  \"_type\" : \"_doc\",\\n  \"_id\" : \"1\",\\n  \"_version\" : 1,\\n  \"found\" : true,\\n  \"took\" : 1,\\n  \"term_vectors\" : {\\n    \"message\" : {\\n      \"field_statistics\" : {\\n        \"sum_doc_freq\" : 7,\\n        \"doc_count\" : 1,\\n        \"sum_ttf\" : 8\\n      },\\n      \"terms\" : {\\n        \"dog\" : {\\n          \"term_freq\" : 1,\\n          \"tokens\" : [\\n            {\\n              \"position\" : 8,\\n              \"start_offset\" : 40,\\n              \"end_offset\" : 43\\n            }\\n          ]\\n        },\\n        \"fox\" : {\\n          \"term_freq\" : 1,\\n          \"tokens\" : [\\n            {\\n              \"position\" : 3,\\n              \"start_offset\" : 16,\\n              \"end_offset\" : 19\\n            }\\n          ]\\n        },\\n        \"jump\" : {\\n          \"term_freq\" : 1,\\n          \"tokens\" : [\\n            {\\n              \"position\" : 4,\\n              \"start_offset\" : 20,\\n              \"end_offset\" : 25\\n            }\\n          ]\\n        },\\n        \"lazi\" : {\\n          \"term_freq\" : 1,\\n          \"tokens\" : [\\n            {\\n              \"position\" : 7,\\n              \"start_offset\" : 35,\\n              \"end_offset\" : 39\\n            }\\n          ]\\n        },\\n        \"over\" : {\\n          \"term_freq\" : 1,\\n          \"tokens\" : [\\n            {\\n              \"position\" : 5,\\n              \"start_offset\" : 26,\\n              \"end_offset\" : 30\\n            }\\n          ]\\n        },\\n        \"quick\" : {\\n          \"term_freq\" : 1,\\n          \"tokens\" : [\\n            {\\n              \"position\" : 1,\\n              \"start_offset\" : 4,\\n              \"end_offset\" : 9\\n            }\\n          ]\\n        },\\n        \"the\" : {\\n          \"term_freq\" : 2,\\n          \"tokens\" : [\\n            {\\n              \"position\" : 0,\\n              \"start_offset\" : 0,\\n              \"end_offset\" : 3\\n            },\\n            {\\n              \"position\" : 6,\\n              \"start_offset\" : 31,\\n              \"end_offset\" : 34\\n            }\\n          ]\\n        }\\n      }\\n    }\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"여러개의 필드를 같이 확인하고 싶을 때는 \",t().createElement(l.code,{display:\"inline\"},\"?fields=field1,field2\"),\" 처럼 쉼표로 나열해서 볼 수 있습니다.\"))}};function o(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),s})()));","frontmatter":{"id":"esG7-06-03-analyzer","slug":"/krEsguide7/esG7-06-03-analyzer","title":"6.3 애널라이저 - Analyzer","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["indexing","text","analysis","analyzer"],"link":"file:///Users/kimjmin/git/docs-kr/esguide7","linkPath":"06-text-analysis/06-03-analyzer.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}