{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},l={};function r(e){var n=l[e];if(void 0!==n)return n.exports;var a=l[e]={exports:{}};return t[e](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var a={};return(()=>{r.r(a),r.d(a,{default:()=>l});var e=r(825),n=r(24),t=r.n(n);const l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),n.components),r=l.wrapper;return r?t().createElement(r,n,t().createElement(a)):a();function a(){var l=Object.assign({p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\",img:\"img\",h2:\"h2\"},(0,e.useMDXComponents)(),n.components),r=l.DocCallOut,a=l.DocTabs,c=l.DocTab;return r||o(\"DocCallOut\",!0),c||o(\"DocTab\",!0),a||o(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(l.p,null,\"여러 명령을 배치로 수행하기 위해서 \",t().createElement(l.strong,null,\"_bulk API\"),\"의 사용이 가능합니다. _bulk API로 \",t().createElement(l.strong,null,\"index, create, update, delete\"),\"의 동작이 가능하며 delete를 제외하고는 명령문과 내용문을 한 줄씩 순서대로 입해야 합니다. delete는 내용 입력이 필요 없기 때문에 명령문만 있습니다.\"),\"\\n\",t().createElement(r,{color:\"warning\"},t().createElement(l.p,null,\"_bulk 의 명령문과 데이터문은 반드시 각각 한 줄 안에 입력이 되어야 하며 줄바꿈을 허용하지 않습니다.\")),\"\\n\",t().createElement(l.p,null,\"다음은 _bulk 명령을 실행한 예제입니다. 각 명령의 결과가 items에 배열로 리턴됩니다.\"),\"\\n\",t().createElement(a,null,t().createElement(c,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'POST _bulk\\n{\"index\":{\"_index\":\"test\", \"_id\":\"1\"}}\\n{\"field\":\"value one\"}\\n{\"index\":{\"_index\":\"test\", \"_id\":\"2\"}}\\n{\"field\":\"value two\"}\\n{\"delete\":{\"_index\":\"test\", \"_id\":\"2\"}}\\n{\"create\":{\"_index\":\"test\", \"_id\":\"3\"}}\\n{\"field\":\"value three\"}\\n{\"update\":{\"_index\":\"test\", \"_id\":\"1\"}}\\n{\"doc\":{\"field\":\"value two\"}}\\n'))),t().createElement(c,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 440,\\n  \"errors\" : false,\\n  \"items\" : [\\n    {\\n      \"index\" : {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_version\" : 1,\\n        \"result\" : \"created\",\\n        \"_shards\" : {\\n          \"total\" : 2,\\n          \"successful\" : 1,\\n          \"failed\" : 0\\n        },\\n        \"_seq_no\" : 0,\\n        \"_primary_term\" : 1,\\n        \"status\" : 201\\n      }\\n    },\\n    {\\n      \"index\" : {\\n        \"_index\" : \"test\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_version\" : 1,\\n        \"result\" : \"created\",\\n        \"_shards\" : {\\n          \"total\" : 2,\\n          \"successful\" : 1,\\n          \"failed\" : 0\\n        },\\n        \"_seq_no\" : 1,\\n        \"_primary_term\" : 1,\\n        \"status\" : 201\\n      }\\n    },\\n... 후략 ...\\n')))),\"\\n\",t().createElement(l.p,null,\"위 명령이 실행하는 동작들은 다음과 같습니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/04-03_bulk_operation.png\",alt:\"bulk 실행 동작 설명\"})),\"\\n\",t().createElement(l.p,null,\"모든 명령이 동일한 인덱스에서 수행되는 경우에는 아래와 같이 \",t().createElement(l.code,{display:\"inline\"},\"<인덱스명>/_bulk\"),\" 형식으로도 사용이 가능합니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/04-03_bulk_perIndex.png\",alt:\"인덱스 단위로 _bulk 사용\"})),\"\\n\",t().createElement(l.p,null,\"벌크 동작은 따로따로 수행하는 것 보다 속도가 훨씬 빠릅니다. 특히 대량의 데이터를 입력 할 때는 반드시 _bulk API를 사용해야 불필요한 오버헤드가 없습니다. \",t().createElement(l.strong,null,\"Logstash\"),\" 와 \",t().createElement(l.strong,null,\"Beats\"),\" 그리고 Elastic 웹페이지에서 제공하는 대부분의 언어별 클라이언트에서는 데이터를 입력할 때 _bulk를 사용하도록 개발되어 있습니다.\"),\"\\n\",t().createElement(r,{color:\"danger\"},t().createElement(l.p,null,\"Elasticsearch 에는 커밋이나 롤백 등의 트랜잭션 개념이 없습니다. _bulk 작업 중 연결이 끊어지거나 시스템이 다운되는 등의 이유로 동작이 중단 된 경우에는 어느 동작까지 실행되었는지 확인이 불가능합니다. 보통 이런 경우 전체 인덱스를 삭제하고 처음부터 다시 하는 것이 안전합니다.\")),\"\\n\",t().createElement(l.h2,{id:\"파일에-저장-내용-실행\"},\"파일에 저장 내용 실행\"),\"\\n\",t().createElement(l.p,null,\"벌크 명령을 파일로 저장하고 curl 명령으로 실행시킬 수 있습니다. 저장한 명령 파일을 \",t().createElement(l.code,{display:\"inline\"},\"--data-binary\"),\" 로 지정하면 저장된 파일로 부터 입력할 명령과 데이터를 읽어올 수 있습니다. 다음 내용을 \",t().createElement(l.strong,null,\"bulk.json\"),\" 이라는 이름의 파일로 먼저 저장 해 보겠습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{display:\"block\"},'{\"index\":{\"_index\":\"test\",\"_id\":\"1\"}}\\n{\"field\":\"value one\"}\\n{\"index\":{\"_index\":\"test\",\"_id\":\"2\"}}\\n{\"field\":\"value two\"}\\n{\"delete\":{\"_index\":\"test\",\"_id\":\"2\"}}\\n{\"create\":{\"_index\":\"test\",\"_id\":\"3\"}}\\n{\"field\":\"value three\"}\\n{\"update\":{\"_index\":\"test\",\"_id\":\"1\"}}\\n{\"doc\":{\"field\":\"value two\"}}\\n')),\"\\n\",t().createElement(l.p,null,\"다음 명령으로 \",t().createElement(l.strong,null,\"bulk.json\"),\" 파일에 있는 내용들을 _bulk 명령으로 실행 가능합니다. 파일 이름 앞에는 \",t().createElement(l.code,{display:\"inline\"},\"@\"),\"문자를 입력합니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-bash\",display:\"block\"},\"$ curl -XPOST \\\"http://localhost:9200/_bulk\\\" -H 'Content-Type: application/json' --data-binary @bulk.json\\n\")))}};function o(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),a})()));","frontmatter":{"id":"esG7-04-03-bulk-api","slug":"/krEsguide7/esG7-04-03-bulk-api","title":"4.3 벌크 - _bulk API","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["data","api","REST","Bulk"],"link":"https://github.com/elastic/docs-kr/esguide7/blob/main","linkPath":"04-data/04-03-bulk-api.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}