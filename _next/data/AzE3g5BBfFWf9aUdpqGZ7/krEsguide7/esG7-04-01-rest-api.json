{"pageProps":{"bundle":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],t):\"object\"==typeof exports?exports.MDXContent=t(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=t(e.mdxJsReact,e.React)}(this,((e,t)=>(()=>{\"use strict\";var n={24:e=>{e.exports=t},825:t=>{t.exports=e}},l={};function a(e){var t=l[e];if(void 0!==t)return t.exports;var r=l[e]={exports:{}};return n[e](r,r.exports,a),r.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var r={};return(()=>{a.r(r),a.d(r,{default:()=>l});var e=a(825),t=a(24),n=a.n(t);const l=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),t.components),a=l.wrapper;return a?n().createElement(a,t,n().createElement(r)):r();function r(){var l=Object.assign({p:\"p\",strong:\"strong\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\",h2:\"h2\",pre:\"pre\",a:\"a\",img:\"img\"},(0,e.useMDXComponents)(),t.components);return n().createElement(n().Fragment,null,n().createElement(l.p,null,\"Elasticsearch는 http 프로토콜로 접근이 가능한 REST API를 지원합니다. 자원별로 고유 URL로 접근이 가능하며 http 메서드 PUT, POST, GET, DELETE 를 이용해서 자원을 처리합니다. 이런 특성을 가진 시스템을 보통 \",n().createElement(l.strong,null,\"RESTFul\"),\" 한 시스템이라고 말합니다.\"),\"\\n\",n().createElement(l.p,null,\"REST API가 익숙치 않은 분들을 위해 간단한 비교 설명을 드리면 다음과 같습니다. 사용자 정보를 다루는 \",n().createElement(l.strong,null,\"user.com\"),\" 이라는 시스템이 있다고 가정하고 \",n().createElement(l.strong,null,\"name=kim, age=38, gender=m\"),\" 이라는 사용자 정보를 처리한다고 해 보겠습니다. REST를 지원하지 않는 시스템에서는 보통 다음과 같이 각 가능에 대한 개별 페이지로 접근하거나 명령을 매개변수로 처리합니다.\"),\"\\n\",n().createElement(l.h3,{id:\"restful-하지-않은-시스템에서의-데이터-처리\"},\"RESTFul 하지 않은 시스템에서의 데이터 처리\"),\"\\n\",n().createElement(l.ul,null,\"\\n\",n().createElement(l.li,null,\"입력 : \",n().createElement(l.code,{display:\"inline\"},\"http://user.com/input.jsp?name=kim&age=38&gender=m\")),\"\\n\",n().createElement(l.li,null,\"조회 : \",n().createElement(l.code,{display:\"inline\"},\"http://user.com/get.jsp?name=kim\")),\"\\n\",n().createElement(l.li,null,\"삭제 : \",n().createElement(l.code,{display:\"inline\"},\"http://user.com/delete.jsp?name=kim\")),\"\\n\"),\"\\n\",n().createElement(l.p,null,\"REST API를 지원하는 시스템은 kim 이라는 사용자에 대해 항상 단일 URL로 접근을 하고 \",n().createElement(l.strong,null,\"PUT, GET, DELETE\"),\" 같은 http 메서드로 데이터를 처리합니다\"),\"\\n\",n().createElement(l.h3,{id:\"restful-한-시스템에서의-데이터-처리\"},\"RESTFul 한 시스템에서의 데이터 처리\"),\"\\n\",n().createElement(l.ul,null,\"\\n\",n().createElement(l.li,null,\"입력 : \",n().createElement(l.code,{display:\"inline\"},'PUT http://user.com/kim -d {\"name\":\"kim\", \"age\":38, \"gender\":\"m\"}')),\"\\n\",n().createElement(l.li,null,\"조회 : \",n().createElement(l.code,{display:\"inline\"},\"GET http://user.com/kim\")),\"\\n\",n().createElement(l.li,null,\"삭제 : \",n().createElement(l.code,{display:\"inline\"},\"DELETE http://user.com/kim\")),\"\\n\"),\"\\n\",n().createElement(l.h2,{id:\"유닉스-curl\"},\"유닉스 curl\"),\"\\n\",n().createElement(l.p,null,\"MacOS, 리눅스와 같은 유닉스 기반 운영체제에서는 \",n().createElement(l.code,{display:\"inline\"},\"curl\"),\" 명령어로 간편하게 REST API 사용이 가능합니다. Elasticsearch를 실행한 뒤 curl 명령을 이용해서 elasticsearch 클러스터의 최상위 경로를 호출하며 다음과 같이 클러스터의 상태 정보가 json 형식으로 리턴됩니다.\"),\"\\n\",n().createElement(l.pre,null,n().createElement(l.code,{className:\"language-bash\",display:\"block\"},'$ curl -XGET \"http://localhost:9200\"\\n{\\n  \"name\" : \"Jongminui-MacBook-Pro.local\",\\n  \"cluster_name\" : \"elasticsearch\",\\n  \"cluster_uuid\" : \"hpmT8TPiR1Kk69YNao9V3w\",\\n  \"version\" : {\\n    \"number\" : \"7.3.0\",\\n    \"build_flavor\" : \"default\",\\n    \"build_type\" : \"tar\",\\n    \"build_hash\" : \"de777fa\",\\n    \"build_date\" : \"2019-07-24T18:30:11.767338Z\",\\n    \"build_snapshot\" : false,\\n    \"lucene_version\" : \"8.1.0\",\\n    \"minimum_wire_compatibility_version\" : \"6.8.0\",\\n    \"minimum_index_compatibility_version\" : \"6.0.0-beta1\"\\n  },\\n  \"tagline\" : \"You Know, for Search\"\\n}\\n')),\"\\n\",n().createElement(l.p,null,\"리턴된 결과는 노드명, 클러스터명, Elasticsearch 버전, 루씬 버전 등의 정보들을 담고 있습니다.\"),\"\\n\",n().createElement(l.h2,{id:\"kibana-dev-tools\"},\"Kibana Dev Tools\"),\"\\n\",n().createElement(l.p,null,\"Rest API를 쉽게 사용하기 위해서는 \",n().createElement(l.a,{href:\"https://www.getpostman.com\"},\"포스트맨\"),\" 같은 도구를 사용할 수 있습니다. Kibana에는 elasticsearch 에서 REST API를 간편하게 실행할 수 있는 \",n().createElement(l.strong,null,\"Dev Tools\"),\" 라는 도구를 제공합니다.\"),\"\\n\",n().createElement(l.p,null,\"먼저 Kibana를 실행하기 위해서는 Elastic 홈페이지 (\",n().createElement(l.a,{href:\"https://www.elastic.co\"},\"https://www.elastic.co\"),\")에서 운영체제별로 맞는 Kibana 버전을 내려받아 압축을 풀고 \",n().createElement(l.code,{display:\"inline\"},\"bin/kibana\"),\" 또는 \",n().createElement(l.code,{display:\"inline\"},\"bin/kibana.bat\"),\" (윈도우즈) 를 실행시키면 디폴트로 같은 호스트의 \",n().createElement(l.strong,null,\"localhost:9200\"),\" 에서 실행중인 elasticsearch와 통신하며 실행이 됩니다.\"),\"\\n\",n().createElement(l.p,null,\"Elasticsearch와 Kibana가 서로 다른 호스트에서 실행되고 있거나 통신 포트가 9200이 아니면 Kibana 홈 config 디렉토리 아래에 있는 \",n().createElement(l.code,{display:\"inline\"},\"kibana.yml\"),\" 파일에서 \",n().createElement(l.code,{display:\"inline\"},'elasticsearch.url: \"http://localhost:9200\"'),\" 옵션을 설정하면 됩니다. 기본적으로 Kibana는 5601 포트에서 실행이 되며 변경하고 싶으면 \",n().createElement(l.code,{display:\"inline\"},\"server.port: 5601\"),\" 을 변경하고 싶은 포트 값으로 설정합니다.\"),\"\\n\",n().createElement(l.p,null,\"Kibana를 실행한 뒤 웹 브라우저를 열고 \",n().createElement(l.a,{href:\"http://localhost:5601\"},\"http://localhost:5601\"),\" 로 접속하면 Kibana를 바로 사용할 수 있습니다. Kibana Dev Tools는 쿼리의 자동 완성도 되고 호스트 경로도 별도로 입력할 필요가 없습니다. 그리고 Dev Tools 에서 입력한 명령을 curl 명령으로 변환하여 클립보드에 복사하는 것도 가능합니다.\"),\"\\n\",n().createElement(l.p,null,n().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/04-01_kibana_dev_tools.png\",alt:\"Kibana 의 Dev Tools 메뉴\"})))}}})(),r})()));","frontmatter":{"id":"esG7-04-01-rest-api","slug":"/krEsguide7/esG7-04-01-rest-api","title":"4.1 REST API","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["data","api","REST"],"link":"https://github.com/elastic/docs-kr/esguide7/blob/main","linkPath":"04-data/04-01-rest-api.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}