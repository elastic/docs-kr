{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},l={};function a(e){var n=l[e];if(void 0!==n)return n.exports;var r=l[e]={exports:{}};return t[e](r,r.exports,a),r.exports}a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var r={};return(()=>{a.r(r),a.d(r,{default:()=>l});var e=a(825),n=a(24),t=a.n(n);const l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),n.components),a=l.wrapper;return a?t().createElement(a,n,t().createElement(r)):r();function r(){var l=Object.assign({p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\",span:\"span\",ul:\"ul\",li:\"li\",h2:\"h2\",a:\"a\"},(0,e.useMDXComponents)(),n.components),a=l.DocTabs,r=l.DocTab;return r||c(\"DocTab\",!0),a||c(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(l.p,null,\"지금까지는 문자열 필드들의 검색에 대해 살펴보았습니다. Elasticsearch는 이 외에도 \",t().createElement(l.strong,null,\"숫자\"),\"나 \",t().createElement(l.strong,null,\"날짜\"),\" 형식들의 저장이 가능합니다. 숫자, 날짜 형식은 \",t().createElement(l.strong,null,\"range\"),\" 쿼리를 이용해서 검색을 합니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,\"range\"),\" 쿼리의 예제를 위해 먼저 아래의 \",t().createElement(l.strong,null,\"phones\"),\" 인덱스를 추가하겠습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'POST phones/_bulk\\n{\"index\":{\"_id\":1}}\\n{\"model\":\"Samsung GalaxyS 5\",\"price\":475,\"date\":\"2014-02-24\"}\\n{\"index\":{\"_id\":2}}\\n{\"model\":\"Samsung GalaxyS 6\",\"price\":795,\"date\":\"2015-03-15\"}\\n{\"index\":{\"_id\":3}}\\n{\"model\":\"Samsung GalaxyS 7\",\"price\":859,\"date\":\"2016-02-21\"}\\n{\"index\":{\"_id\":4}}\\n{\"model\":\"Samsung GalaxyS 8\",\"price\":959,\"date\":\"2017-03-29\"}\\n{\"index\":{\"_id\":5}}\\n{\"model\":\"Samsung GalaxyS 9\",\"price\":1059,\"date\":\"2018-02-25\"}\\n')),\"\\n\",t().createElement(l.p,null,\"( \",t().createElement(l.span,{role:\"img\",\"aria-label\":\"nerd face\"},\"🤓\"),\" 위 예제 데이터는 실제 상품 정보와 아무런 관련이 없습니다 )\"),\"\\n\",t().createElement(l.p,null,\"range 쿼리는 \",t().createElement(l.code,{display:\"inline\"},\"range : { <필드명>: { <파라메터>:<값> } }\"),\" 으로 입력됩니다. range 쿼리 파라메터는 아래의 4가지가 있습니다.\"),\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"gte\"),\" (Greater-than or equal to) - 이상 (같거나 큼)\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"gt\"),\" (Greater-than) – 초과 (큼)\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"lte\"),\" (Less-than or equal to) - 이하 (같거나 작음)\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"lt\"),\" (Less-than) - 미만 (작음)\"),\"\\n\"),\"\\n\",t().createElement(l.p,null,\"다음은 phone 인덱스에서 \",t().createElement(l.strong,null,\"price\"),\" 필드 값이 \",t().createElement(l.strong,null,\"700 이상\"),\", \",t().createElement(l.strong,null,\"900 미만\"),\"인 데이터를 검색하는 쿼리입니다.\"),\"\\n\",t().createElement(a,null,t().createElement(r,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET phones/_search\\n{\\n  \"query\": {\\n    \"range\": {\\n      \"price\": {\\n        \"gte\": 700,\\n        \"lt\": 900\\n      }\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 1.0,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 6\",\\n          \"price\" : 795,\\n          \"date\" : \"2015-03-15\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 7\",\\n          \"price\" : 859,\\n          \"date\" : \"2016-02-21\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"price 값이 700과 900 사이인 \",t().createElement(l.code,{display:\"inline\"},'\"price\" : 795'),\", \",t().createElement(l.code,{display:\"inline\"},'\"price\" : 859'),\" 두개의 결과가 리턴 되었습니다.\"),\"\\n\",t().createElement(l.h2,{id:\"날짜-검색\"},\"날짜 검색\"),\"\\n\",t().createElement(l.p,null,\"날짜도 숫자와 마찬가지로 \",t().createElement(l.strong,null,\"range\"),\" 쿼리의 사용이 가능합니다. 기본적으로 Elasticsearch 에서 날짜 값은 2016-01-01 또는 2016-01-01T10:15:30 과 같이 JSON 에서 일반적으로 사용되는 \",t().createElement(l.strong,null,\"ISO8601\"),\" 형식을 사용합니다. 다음은 date 필드의 날짜가 2016년 1월 1일 이후인 도큐먼트들을 검색하는 쿼리입니다.\"),\"\\n\",t().createElement(a,null,t().createElement(r,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET phones/_search\\n{\\n  \"query\": {\\n    \"range\": {\\n      \"date\": {\\n        \"gt\": \"2016-01-01\"\\n      }\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 3,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 1.0,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 7\",\\n          \"price\" : 859,\\n          \"date\" : \"2016-02-21\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"4\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 8\",\\n          \"price\" : 959,\\n          \"date\" : \"2017-03-29\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 9\",\\n          \"price\" : 1059,\\n          \"date\" : \"2018-02-25\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"쿼리의 날짜 포맷을 다르게 하고 싶으면 \",t().createElement(l.code,{display:\"inline\"},\"format\"),\" 옵션의 사용이 가능합니다. \",t().createElement(l.code,{display:\"inline\"},\"||\"),\" 을 사용해서 여러 값의 입력이 가능합니다. 아래는 date 필드의 값이 \",t().createElement(l.strong,null,\"2015년 12월 31일\"),\" 부터 \",t().createElement(l.strong,null,\"2018년 이전\"),\" 사이에 있는 값들을 검색하는 쿼리입니다.\"),\"\\n\",t().createElement(a,null,t().createElement(r,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET phones/_search\\n{\\n  \"query\": {\\n    \"range\": {\\n      \"date\": {\\n        \"gt\": \"31/12/2015\",\\n        \"lt\": \"2018\",\\n        \"format\": \"dd/MM/yyyy||yyyy\"\\n      }\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 1.0,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 7\",\\n          \"price\" : 859,\\n          \"date\" : \"2016-02-21\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"4\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 8\",\\n          \"price\" : 959,\\n          \"date\" : \"2017-03-29\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"날짜를 검색 할 때는 검색하는 현재 시간을 가져오는 예약어 \",t().createElement(l.code,{display:\"inline\"},\"now\"),\"와 \",t().createElement(l.code,{display:\"inline\"},\"y\"),\"(년), \",t().createElement(l.code,{display:\"inline\"},\"M\"),\"(월), \",t().createElement(l.code,{display:\"inline\"},\"d\"),\"(일), \",t().createElement(l.code,{display:\"inline\"},\"h\"),\"(시), \",t().createElement(l.code,{display:\"inline\"},\"m\"),\"(분), \",t().createElement(l.code,{display:\"inline\"},\"s\"),\"(초), \",t().createElement(l.code,{display:\"inline\"},\"w\"),\"(주) 등의 사용이 가능합니다. 다음은 \",t().createElement(l.strong,null,\"date\"),\"의 값이 \",t().createElement(l.strong,null,\"2016년 1월 1일에서 6개월 후\"),\"인 날 부터 \",t().createElement(l.strong,null,\"오늘보다 365일 전\"),\"인 날 사이의 데이터를 가져오는 쿼리입니다. 참고로 필자가 아래 예제를 실행한 날짜는 \",t().createElement(l.strong,null,\"2019년 9월 3일\"),\" 입니다.\"),\"\\n\",t().createElement(a,null,t().createElement(r,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET phones/_search\\n{\\n  \"query\": {\\n    \"range\": {\\n      \"date\": {\\n        \"gt\": \"2016-01-01||+6M\",\\n        \"lt\": \"now-365d\"\\n      }\\n    }\\n  }\\n}\\n'))),t().createElement(r,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 1.0,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"4\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 8\",\\n          \"price\" : 959,\\n          \"date\" : \"2017-03-29\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"phones\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 1.0,\\n        \"_source\" : {\\n          \"model\" : \"Samsung GalaxyS 9\",\\n          \"price\" : 1059,\\n          \"date\" : \"2018-02-25\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"phones 인덱스의 전체 도큐먼트 중 2016년 1월 1일에 6개월을 더한 \",t().createElement(l.strong,null,\"2016-06-01\"),\"과 검색을 실행한 2019년 9월 3일 보다 1년 전인 \",t().createElement(l.strong,null,\"2018-09-03\"),\" 사이의 값인 \",t().createElement(l.code,{display:\"inline\"},'\"date\" : \"2017-03-29\"'),\", \",t().createElement(l.code,{display:\"inline\"},'\"date\" : \"2018-02-25\"'),\" 두 개의 결과가 리턴 되었습니다.\"),\"\\n\",t().createElement(l.p,null,\"지금까지 살펴본 \",t().createElement(l.strong,null,\"range\"),\" 쿼리의 스코어는 모두 \",t().createElement(l.code,{display:\"inline\"},'\"_score\" : 1.0'),\"로 동일합니다. \",t().createElement(l.strong,null,\"range\"),\" 쿼리는 기본적으로 정확도를 계산하지 않습니다. 검색하는 조건이 1000이하라고 할 때 1000에 가까울수록 정확도가 높아지고 1000 보다 크게 낮아질수록 정확도가 떨어지는 것은 아닙니다. 오로지 필드의 값이 1000 보다 같거나 작은지 아닌지의 \",t().createElement(l.code,{display:\"inline\"},\"true\"),\" / \",t().createElement(l.code,{display:\"inline\"},\"false\"),\" 여부만을 판단합니다. 예를 들어 구인 시스템에 입력된 구직자의 입사 지원 조건이 나이 24세부터 55세 사이라고 가정했을 때 구직자의 나이가 35세에 가까울수록 가장 점수가 높고 20대이거나 50대 이면 점수가 낮아지거나 하지 않습니다. range 쿼리는 숫자 또는 날짜가 쿼리 조건에 부합하는지 아닌지의 여부만을 계산합니다.\"),\"\\n\",t().createElement(l.p,null,\"경우에 따라 range 쿼리에 기준점을 주고 기준점과 가깝거나 멀어질 수록 스코어를 적용할 필요가 있다면 \",t().createElement(l.a,{href:\"https://www.elastic.co/guide/en/elasticsearch/reference/7.3/query-dsl-function-score-query.html\"},\"function_score 쿼리\"),\"를 사용해서 조정이 가능합니다. function_score 쿼리는 이 책에서는 다루지 않으니 공식 도큐먼트를 참고하시기 바랍니다.\"),\"\\n\",t().createElement(l.h2,{id:\"정리\"},\"정리\"),\"\\n\",t().createElement(l.p,null,\"이번 장에서는 검색의 개념과 Elasticsearch에서 주로 사용되는 \",t().createElement(l.strong,null,\"match, match_phrase, bool, range\"),\" 등의 쿼리들에 대해 알아보았습니다. 그리고 검색에 영향을 미치는 \",t().createElement(l.strong,null,\"정확도(relevancy)\"),\", 스코어 점수의 개념들에 대해서도 알아보았습니다.\"),\"\\n\",t().createElement(l.p,null,\"Elastic Stack은 검색 외에도 다양한 형태의 데이터 분석 기능들을 제공하지만, 의미 있는 데이터 분석을 위해서는 유효한 데이터의 범위를 확장하고 축소하는 것이 중요하기 때문에 기본 기능인 검색을 잘 이해하는 것 또한 필요합니다. 이번 장에서 살펴본 쿼리 외에도 \",t().createElement(l.strong,null,\"geo_point\"),\" 나 \",t().createElement(l.strong,null,\"nested\"),\" 같은 특수한 데이터들을 검색하는 쿼리들도 있습니다. 이런 쿼리들은 뒤에서 해당 내용들을 설명하면서 같이 다루도록 하겠습니다.\"),\"\\n\",t().createElement(l.p,null,\"다음 장에서는 텍스트 데이터의 분석과 색인 과정에 대해 배워보도록 하겠습니다.\"))}};function c(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),r})()));","frontmatter":{"id":"esG7-05-06-range","slug":"/krEsguide7/esG7-05-06-range","title":"5.6 범위 쿼리 - Range Query","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["query","range"],"link":"https://github.com/elastic/docs-kr/esguide7/blob/main","linkPath":"05-search/05-06-range.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}