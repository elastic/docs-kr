{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},l={};function r(e){var n=l[e];if(void 0!==n)return n.exports;var o=l[e]={exports:{}};return t[e](o,o.exports,r),o.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var o={};return(()=>{r.r(o),r.d(o,{default:()=>l});var e=r(825),n=r(24),t=r.n(n);const l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),n.components),r=l.wrapper;return r?t().createElement(r,n,t().createElement(o)):o();function o(){var l=Object.assign({p:\"p\",strong:\"strong\",h2:\"h2\",pre:\"pre\",code:\"code\",img:\"img\",a:\"a\"},(0,e.useMDXComponents)(),n.components),r=l.DocTabs,o=l.DocTab;return o||c(\"DocTab\",!0),r||c(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(l.p,null,\"RDBMS 같은 시스템에서는 쿼리 조건에 부합하는 지만 판단하여 결과를 가져올 뿐 각 결과들이 얼마나 정확한지에 대한 판단은 보통 불가능합니다. Elasticsearch 와 같은 풀 텍스트 검색엔진은 검색 결과가 입력된 검색 조건과 얼마나 정확하게 일치하는 지를 계산하는 알고리즘을 가지고 있어 이 정확도를 기반으로 사용자가 가장 원하는 결과를 먼저 보여줄 수 있습니다. 이 정확한 정도를 \",t().createElement(l.strong,null,\"relevancy\"),\" 라고 합니다 (렐러번시 라고 읽습니다). 한국어로 번역하면 연관성 또는 관련성 이라고 번역이 되는데, 이 책에서는 이해를 돕기 위해 \",t().createElement(l.strong,null,\"정확도\"),\" 라는 표현을 쓰겠습니다. 스터디 또는 강연 등에서 언급 하실 때는 원래 용어 relevancy 로 사용하실 것을 권장 드립니다.\"),\"\\n\",t().createElement(l.p,null,\"검색을 할 때 사용자는 찾고자 하는 정확한 결과만 보고싶어 합니다. 검색 조건에 포함 되더라도 사용자가 찾으려는 결과와 상관 없는 결과는 보여주지 않는 것이 좋습니다. 구글 또는 네이버 같은 웹 검색엔진들도 검색을 하면 찾은 결과들 중에 어떤 것이 사용자가 입력한 검색어와 가장 연관성이 있는지를 계산하여 정확도가 가장 높은 결과들 부터 보여줍니다.\"),\"\\n\",t().createElement(l.h2,{id:\"스코어-score-점수\"},\"스코어 (score) 점수\"),\"\\n\",t().createElement(l.p,null,\"Elasticsearch의 검색 결과에는 스코어 점수가 표시가 됩니다. 이 점수는 검색된 결과가 얼마나 검색 조건과 일치하는지를 나타내며 점수가 높은 순으로 결과를 보여줍니다. 다음의 match 쿼리 결과를 살펴보겠습니다.\"),\"\\n\",t().createElement(r,null,t().createElement(o,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"message\": \"quick dog\"\\n    }\\n  }\\n}\\n'))),t().createElement(o,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n    \"value\" : 5,\\n    \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 0.8762741,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"3\",\\n        \"_score\" : 0.8762741,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the quick dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 0.6744513,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"1\",\\n        \"_score\" : 0.6173784,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 0.35847884,\\n        \"_source\" : {\\n          \"message\" : \"Lazy jumping dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"4\",\\n        \"_score\" : 0.32951736,\\n        \"_source\" : {\\n          \"message\" : \"Brown fox brown dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"각 검색 결과의 \",t().createElement(l.code,{display:\"inline\"},\"_score\"),\" 항목에 스코어 점수가 표시되고 이 점수가 높은 결과부터 나타납니다. 그리고 상단의 \",t().createElement(l.code,{display:\"inline\"},\"max_score\"),\"에는 전체 결과 중에서 가장 높은 점수가 표시됩니다. Elasticsearch 는 이 점수를 계산하기 위해 \",t().createElement(l.strong,null,\"BM25\"),\" 라는 알고리즘을 이용합니다. BM은 Best Matching 을 뜻합니다.\"),\"\\n\",t().createElement(l.p,null,\"다음은 \",t().createElement(l.strong,null,\"BM25\"),\"의 계산식입니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/05-03_bm25_formula.svg\",alt:\"BM25 계산식\"})),\"\\n\",t().createElement(l.p,null,t().createElement(l.a,{href:\"https://en.wikipedia.org/wiki/Okapi_BM25\"},\"BM25 계산식 - 출처: https://en.wikipedia.org/wiki/Okapi_BM25\")),\"\\n\",t().createElement(l.p,null,\"복잡해 보이는 이 계산에는 크게 \",t().createElement(l.strong,null,\"TF\"),\", \",t().createElement(l.strong,null,\"IDF\"),\" 그리고 \",t().createElement(l.strong,null,\"Field Length\"),\" 총 3가지 요소가 사용됩니다.\"),\"\\n\",t().createElement(l.h2,{id:\"tf-term-frequency\"},\"TF (Term Frequency)\"),\"\\n\",t().createElement(l.p,null,\"구글에서 \",t().createElement(l.strong,null,'\"쥬라기 공원\"'),' 이라는 검색어로 검색을 한다고 가정 해 보겠습니다. **\"쥬라기 공원\"**이라는 단어가 ',t().createElement(l.strong,null,\"5\"),\"번 들어 있는 웹 페이지 보다는 \",t().createElement(l.strong,null,\"10\"),\"번 들어있는 웹 페이지가 내가 보고싶어 하는 정보가 있는 페이지일 확률이 높을 것입니다. 도큐먼트 내에 검색된 **텀(term)**이 더 많을수록 점수가 높아지는 것을 \",t().createElement(l.strong,null,\"Term Frequency\"),\" 라고 합니다.\"),\"\\n\",t().createElement(l.p,null,'앞의 검색에서는 값이 \"The ',t().createElement(l.strong,null,\"quick\"),\" brown fox jumps over the \",t().createElement(l.strong,null,\"quick\"),\" \",t().createElement(l.strong,null,\"dog\"),'\" 인 도큐먼트가 텀 ',t().createElement(l.strong,null,\"quick\"),\", \",t().createElement(l.strong,null,\"dog\"),\" 총 세개를 포함하고 있어 가장 점수가 높습니다. 포함하고 있는 텀이 증가할수록 아래 그래프와 같이 TF 값도 증가를 하며, BM25에서는 최대 25까지 증가합니다. 즉 25 이상 부터는 TF 점수의 변화가 없습니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/05-03_tf.png\",alt:\"Term Frequency 그래프\"}),\"\\n\",t().createElement(l.a,{href:\"https://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation\"},\"출처 : https://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation\")),\"\\n\",t().createElement(l.h2,{id:\"idf-inverse-document-frequency\"},\"IDF (Inverse Document Frequency)\"),\"\\n\",t().createElement(l.p,null,\"다시 구글에서 \",t().createElement(l.strong,null,'\"쥬라기 공원\"'),\" 이라는 검색어로 검색을 했을 때 \",t().createElement(l.strong,null,'\"쥬라기\"'),\" 또는 \",t().createElement(l.strong,null,'\"공원\"'),\" 중 어떤 단어든 포함하는 페이지들은 검색 결과에 나타날 수 있을 것입니다. 이 때 전체 검색 결과 중에 \",t().createElement(l.strong,null,'\"쥬라기\"'),\" 가 포함된 결과는 \",t().createElement(l.strong,null,\"10\"),'개 **\"공원\"**이 포함된 결과는 ',t().createElement(l.strong,null,\"100\"),\"개 라고 가정한다면 흔한 단어인 \",t().createElement(l.strong,null,'\"공원\"'),\" 보다는 희소한 단어인 \",t().createElement(l.strong,null,'\"쥬라기\"'),\" 가 검색에 더 중요한 텀일 가능성이 높습니다. 검색한 텀을 포함하고 있는 도큐먼트 개수가 많을수록 그 텀의 자신의 점수가 감소하는 것을 \",t().createElement(l.strong,null,\"Inverse Document Frequency\"),\" 라고 합니다.\"),\"\\n\",t().createElement(l.p,null,'앞의 검색 결과 중 값이 \"The ',t().createElement(l.strong,null,\"quick\"),' brown fox\" 인 도큐먼트와 \"Lazy jumping ',t().createElement(l.strong,null,\"dog\"),'\" 인 도큐먼트는 ',t().createElement(l.strong,null,\"quick\"),\"과 \",t().createElement(l.strong,null,\"dog\"),\"가 각각 한 번씩만 들어가지만 전체 인덱스를 놓고 보면 \",t().createElement(l.strong,null,\"quick\"),\"이 들어간 문서는 \",t().createElement(l.strong,null,\"3\"),\"개, \",t().createElement(l.strong,null,\"dog\"),\"이 들어간 문서는 \",t().createElement(l.strong,null,\"4\"),\"개 가 있어 \",t().createElement(l.strong,null,\"quick\"),\" 이 들어가 있는 결과가 점수가 높습니다. 전체 인덱스에 포함된 텀이 증가할수록 아래 그래프와 같이 IDF 감소하게 됩니다. (그래서 Inverse 입니다)\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/05-03_idf.png\",alt:\"Inverse Document Frequency 그래프\"}),\"\\n\",t().createElement(l.a,{href:\"https://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation\"},\"출처 : https://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation\")),\"\\n\",t().createElement(l.h2,{id:\"field-length\"},\"Field Length\"),\"\\n\",t().createElement(l.p,null,\"도큐먼트에서 필드 길이가 큰 필드 보다는 짧은 필드에 있는 텀의 비중이 클 것입니다. 블로그 포스트를 검색하는 경우 검색 하려는 단어가 \",t().createElement(l.strong,null,\"제목\"),\"과 \",t().createElement(l.strong,null,\"내용\"),\" 필드에 모두 있는 경우 텍스트 길이가 긴 \",t().createElement(l.strong,null,\"내용\"),\" 필드 보다는 텍스트 길이가 짧은 \",t().createElement(l.strong,null,\"제목\"),\" 필드에 검색어를 포함하고 있는 블로그 포스트가 더 점수가 높게 나타납니다. 다음 \",t().createElement(l.strong,null,\"lazy\"),\" 를 검색한 쿼리의 결과를 살펴보겠습니다.\"),\"\\n\",t().createElement(r,null,t().createElement(o,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'GET my_index/_search\\n{\\n  \"query\": {\\n    \"match\": {\\n      \"message\": \"lazy\"\\n    }\\n  }\\n}\\n'))),t().createElement(o,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'{\\n  \"took\" : 1,\\n  \"timed_out\" : false,\\n  \"_shards\" : {\\n    \"total\" : 1,\\n    \"successful\" : 1,\\n    \"skipped\" : 0,\\n    \"failed\" : 0\\n  },\\n  \"hits\" : {\\n    \"total\" : {\\n      \"value\" : 2,\\n      \"relation\" : \"eq\"\\n    },\\n    \"max_score\" : 1.0909162,\\n    \"hits\" : [\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"5\",\\n        \"_score\" : 1.0909162,\\n        \"_source\" : {\\n          \"message\" : \"Lazy jumping dog\"\\n        }\\n      },\\n      {\\n        \"_index\" : \"my_index\",\\n        \"_type\" : \"_doc\",\\n        \"_id\" : \"2\",\\n        \"_score\" : 0.71425706,\\n        \"_source\" : {\\n          \"message\" : \"The quick brown fox jumps over the lazy dog\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"검색 결과에서 \",t().createElement(l.strong,null,\"lazy\"),' 를 포함하고 있는 2개 도큐먼트 들이 나타났지만 \"The quick brown fox jumps over the lazy dog\" 보다 길이가 짧은 \"Lazy jumping dog\" 가 점수가 더 높게 나타납니다.'))}};function c(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),o})()));","frontmatter":{"id":"esG7-05-03-relevancy","slug":"/krEsguide7/esG7-05-03-relevancy","title":"5.3 정확도 - Relevancy","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["query","relevancy"],"link":"https://github.com/elastic/docs-kr/esguide7/blob/main","linkPath":"05-search/05-03-relevancy.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}