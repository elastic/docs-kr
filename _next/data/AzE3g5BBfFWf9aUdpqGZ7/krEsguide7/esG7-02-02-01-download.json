{"pageProps":{"bundle":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],t):\"object\"==typeof exports?exports.MDXContent=t(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=t(e.mdxJsReact,e.React)}(this,((e,t)=>(()=>{\"use strict\";var a={24:e=>{e.exports=t},825:t=>{t.exports=e}},n={};function r(e){var t=n[e];if(void 0!==t)return t.exports;var s=n[e]={exports:{}};return a[e](s,s.exports,r),s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var s={};return(()=>{r.r(s),r.d(s,{default:()=>n});var e=r(825),t=r(24),a=r.n(t);const n=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,e.useMDXComponents)(),t.components),r=n.wrapper;return r?a().createElement(r,t,a().createElement(s)):s();function s(){var n=Object.assign({p:\"p\",a:\"a\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",h2:\"h2\"},(0,e.useMDXComponents)(),t.components),r=n.DocCallOut,s=n.DocTabs,l=n.DocTab;return r||i(\"DocCallOut\",!0),l||i(\"DocTab\",!0),s||i(\"DocTabs\",!0),a().createElement(a().Fragment,null,a().createElement(n.p,null,\"Elasticsearch 실행을 위해서는 자바1.8 이상의 버전이 설치되어 있어야 하며 JAVA_HOME 환경변수가 잡혀있어야 합니다. 각 버전별로 필요한 자바 버전은 \",a().createElement(n.a,{href:\"https://www.elastic.co/support/matrix#matrix_jvm\"},\"https://www.elastic.co/support/matrix#matrix_jvm\"),\" 페이지에서 확인이 가능합니다.\"),\"\\n\",a().createElement(r,null,a().createElement(n.p,null,\"Elasticsearch 7.0 버전 부터는 기본 배포판에 open-jdk 가 포함되어 있어 따로 Java를 설치 해 주지 않아도 됩니다. 대신 운영체제에 맞게 배포판을 받아야 합니다.\")),\"\\n\",a().createElement(n.p,null,\"먼저 zip / tar.gz 배포판 설치 방법을 알아보겠습니다. 우선은 Linux / MacOS 기준으로 설명 드리겠습니다. 다운로드 한 파일의 압축을 푼 경로로 이동해서 bin/elasticsearch를 실행 해 보면 콘솔에서 다음과 같이 실행이 됩니다. 윈도우 운영체제의 경우 bin\\\\elasticsearch.bat 를 실행하면 됩니다.\"),\"\\n\",a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-bash\",display:\"block\"},\"$ bin/elasticsearch\\n[2019-08-26T07:52:09,090][INFO ][o.e.e.NodeEnvironment    ] [Jongminui-MacBook-Pro.local] using [1] data paths, mounts [[/ (/dev/disk1s1)]], net usable_space [89.1gb], net total_space [465.6gb], types [apfs]\\n[2019-08-26T07:52:09,106][INFO ][o.e.e.NodeEnvironment    ] [Jongminui-MacBook-Pro.local] heap size [989.8mb], compressed ordinary object pointers [true]\\n[2019-08-26T07:52:09,169][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] node name [Jongminui-MacBook-Pro.local], node ID [RDBLYDInSxmMV1PEVit_pQ], cluster name [elasticsearch]\\n[2019-08-26T07:52:09,169][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] version[7.3.0], pid[38788], build[default/tar/de777fa/2019-07-24T18:30:11.767338Z], OS[Mac OS X/10.14.6/x86_64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_151/25.151-b12]\\n[2019-08-26T07:52:09,170][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] JVM home [/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre]\\n[2019-08-26T07:52:09,170][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -Des.networkaddress.cache.ttl=60, -Des.networkaddress.cache.negative.ttl=10, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-785170093085857996, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -XX:+PrintGCDetails, -XX:+PrintGCDateStamps, -XX:+PrintTenuringDistribution, -XX:+PrintGCApplicationStoppedTime, -Xloggc:logs/gc.log, -XX:+UseGCLogFileRotation, -XX:NumberOfGCLogFiles=32, -XX:GCLogFileSize=64m, -Dio.netty.allocator.type=unpooled, -XX:MaxDirectMemorySize=536870912, -Des.path.home=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0, -Des.path.conf=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/config, -Des.distribution.flavor=default, -Des.distribution.type=tar, -Des.bundled_jdk=true]\\n[2019-08-26T07:52:11,000][INFO ][o.e.p.PluginsService     ] [Jongminui-MacBook-Pro.local] loaded module [aggs-matrix-stats]\\n[2019-08-26T07:52:11,000][INFO ][o.e.p.PluginsService     ] [Jongminui-MacBook-Pro.local] loaded module [analysis-common]\\n[2019-08-26T07:52:11,000][INFO ][o.e.p.PluginsService     ] [Jongminui-MacBook-Pro.local] loaded module [data-frame]\\n...\\n\")),\"\\n\",a().createElement(n.p,null,\"이제 Elasticsearch의 설치와 실행이 끝났습니다. (정말입니다!) 위 실행 화면을 보면 [Jongminui-MacBook-Pro.local] 라는 이름으로 Elasticsearch의 노드가 실행 된 것을 볼 수 있습니다. 노드 이름은 직접 지정이 가능하며 지정하지 않았다면 7.0 버전 부터는 호스트명으로 생성되고 5.x, 6.x 버전에서는 노드 프로세스의 UUID의 첫 7자 알파벳으로 지정됩니다. Elasticsearch 2.x 이전 버전에서느 실행을 시키면 노드명이 [Iron Man] 같은 아메리카코믹의 슈퍼영웅 이름으로 랜덤하게 생성 되었는데 저작권 문제 때문에 5.x 이상 부터는 디폴트 네임으로 사용이 불가능하게 되었습니다.\"),\"\\n\",a().createElement(n.p,null,\"Elasticsearch를 실행할 때 추가적으로 -d, -p 옵션을 사용할 수 있습니다.\"),\"\\n\",a().createElement(n.ul,null,\"\\n\",a().createElement(n.li,null,\"-\",a().createElement(n.strong,null,\"d\"),\" : Elasticsearch를 백그라운 데몬으로 실행합니다.\"),\"\\n\",a().createElement(n.li,null,a().createElement(n.strong,null,\"-p <파일명>\"),\" : Elasticsearch 프로세스 ID를 지정한 파일에 저장합니다. 실행이 종료되면 저장된 파일은 자동으로 삭제됩니다.\"),\"\\n\"),\"\\n\",a().createElement(n.h2,{id:\"-d--백그라운드-실행\"},\"-d : 백그라운드 실행\"),\"\\n\",a().createElement(n.p,null,a().createElement(n.strong,null,\"-d\"),\" 옵션을 추가해서 Elasticsearch를 실행해보면 화면에 아무런 반응 없이 명령 수행이 끝나게 되고, 실행 중인 Elasticsearch의 실행 로그는 logs 디렉토리 아래에 <클러스터명>.log 파일에서 확인이 가능합니다. 아무런 설정을 하지 않았다면 기본적으로 logs/elasticsearch.log 에 저장됩니다.\"),\"\\n\",a().createElement(n.p,null,\"백그라운드로 실행한 후 ps -ef | grep elasticsearch 명령으로 실행 중인 프로세스를 검색하면 Elasticsearch가 실행되고 있음을 확인할 수 있습니다.\"),\"\\n\",a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-bash\",display:\"block\"},\"$ bin/elasticsearch -d\\n\\n$ ps -ef | grep elasticsearch\\n501 38850     1   0  8:00AM ttys000    0:36.58 /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Dio.netty.allocator.type=unpooled -XX:MaxDirectMemorySize=536870912 -Des.path.home=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0 -Des.path.conf=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/config -Des.distribution.flavor=default -Des.distribution.type=tar -Des.bundled_jdk=true -cp /Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/lib/* org.elasticsearch.bootstrap.Elasticsearch -d\\n501 38857 38850   0  8:00AM ttys000    0:00.03 /Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/modules/x-pack-ml/platform/darwin-x86_64/bin/controller\\n501 38864 38857   0  8:00AM ttys000    0:00.52 ./autodetect --jobid=multiple --bucketspan=900 --lengthEncodedInput --maxAnomalyRecords=500 --timefield=@timestamp --persistInterval=12869 --maxQuantileInterval=23669 --limitconfig=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/limitconfig2644434340400277937.conf --quantilesState=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/multiple_quantiles_557343876454452728180.json --deleteStateFiles --fieldconfig=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/fieldconfig1365288688663343555.conf --logPipe=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/autodetect_multiple_log_38850 --input=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/autodetect_multiple_input_38850 --inputIsPipe --output=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/autodetect_multiple_output_38850 --outputIsPipe --restore=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/autodetect_multiple_restore_38850 --restoreIsPipe --persist=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7812365538420855556/autodetect_multiple_persist_38850 --persistIsPipe\\n501 38867 38460   0  8:00AM ttys000    0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn elasticsearch\\n  \\n$ head logs/elasticsearch.log\\n[2019-08-26T07:52:09,090][INFO ][o.e.e.NodeEnvironment    ] [Jongminui-MacBook-Pro.local] using [1] data paths, mounts [[/ (/dev/disk1s1)]], net usable_space [89.1gb], net total_space [465.6gb], types [apfs]\\n[2019-08-26T07:52:09,106][INFO ][o.e.e.NodeEnvironment    ] [Jongminui-MacBook-Pro.local] heap size [989.8mb], compressed ordinary object pointers [true]\\n[2019-08-26T07:52:09,169][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] node name [Jongminui-MacBook-Pro.local], node ID [RDBLYDInSxmMV1PEVit_pQ], cluster name [elasticsearch]\\n[2019-08-26T07:52:09,169][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] version[7.3.0], pid[38788], build[default/tar/de777fa/2019-07-24T18:30:11.767338Z], OS[Mac OS X/10.14.6/x86_64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_151/25.151-b12]\\n[2019-08-26T07:52:09,170][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] JVM home [/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre]\\n[2019-08-26T07:52:09,170][INFO ][o.e.n.Node               ] [Jongminui-MacBook-Pro.local] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -Des.networkaddress.cache.ttl=60, -Des.networkaddress.cache.negative.ttl=10, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-785170093085857996, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -XX:+PrintGCDetails, -XX:+PrintGCDateStamps, -XX:+PrintTenuringDistribution, -XX:+PrintGCApplicationStoppedTime, -Xloggc:logs/gc.log, -XX:+UseGCLogFileRotation, -XX:NumberOfGCLogFiles=32, -XX:GCLogFileSize=64m, -Dio.netty.allocator.type=unpooled, -XX:MaxDirectMemorySize=536870912, -Des.path.home=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0, -Des.path.conf=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/config, -Des.distribution.flavor=default, -Des.distribution.type=tar, -Des.bundled_jdk=true]  \\n\")),\"\\n\",a().createElement(n.p,null,\"백그라운드로 실행 중인 Elasticsearch 프로세스를 종료하려면 kill 명령을 사용해야 합니다. 위에서 현재 실행되고 있는 엘라스틱서치의 프로세스 ID는 38850 입니다. \",a().createElement(n.strong,null,\"kill 38850\"),\" 명령으로 엘라스틱서치를 종료하고 다시 프로세스를 확인하면 프로세스가 종료된 것을 확인할 수 있습니다.\"),\"\\n\",a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-text\",display:\"block\"},\"$ kill 38850\\n\\n$ ps -ef | grep elasticsearch\\n  501 38901 38460   0  8:03AM ttys000    0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn elasticsearch\\n\")),\"\\n\",a().createElement(n.h2,{id:\"-p--프로세스-id-파일로-저장\"},\"-p : 프로세스 ID 파일로 저장\"),\"\\n\",a().createElement(n.p,null,a().createElement(n.strong,null,\"-p <파일명>\"),\" 옵션을 추가해 실행된 Elasticsearch 프로세스 ID를 특정 파일에 저장할 수 있습니다. es.pid라는 파일에 실행된 Elasticsearch 프로세스 ID를 저장해 보겠습니다. 명령을 실행한 뒤 es.pid 파일의 내용을 확인하고 실행 중인 프로세스와 비교해 보겠습니다.\"),\"\\n\",a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-bash\",display:\"block\"},\"$ bin/elasticsearch -d -p es.pid\\n\\n$ ls\\nLICENSE.txt    README.textile config         es.pid         lib            modules\\nNOTICE.txt     bin            data           jdk            logs           plugins\\n\\n$ cat es.pid\\n39060\\n\\n$ ps -ef | grep elasticsearch\\n  501 39060     1   0  8:07AM ttys000    0:39.02 /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-7723664224795657363 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Dio.netty.allocator.type=unpooled -XX:MaxDirectMemorySize=536870912 -Des.path.home=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0 -Des.path.conf=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/config -Des.distribution.flavor=default -Des.distribution.type=tar -Des.bundled_jdk=true -cp /Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/lib/* org.elasticsearch.bootstrap.Elasticsearch -d -p es.pid\\n...\\n\")),\"\\n\",a().createElement(n.p,null,\"위에서 es.pid 에 저장된 내용과 실행중인 프로세스 ID 모두 \",a().createElement(n.strong,null,\"39060\"),\"인 것을 확인할 수 있습니다. 프로세스 ID가 저장된 es.pid 파일은 실행 중인 Elasticsearch 프로세스를 종료하면 자동으로 삭제됩니다. 이제 이 옵션을 활용해서 Elasticsearch를 데몬으로 실행하는 start.sh 파일과 stop.sh 파일을 만들어 보겠습니다. 각 파일의 내용은 다음과 같이 합니다.\"),\"\\n\",a().createElement(s,null,a().createElement(l,{name:\"<start.sh> 파일의 내용\"},a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-text\",display:\"block\"},\"bin/elasticsearch -d -p es.pid\\n\"))),a().createElement(l,{name:\"<stop.sh> 파일의 내용\"},a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-text\",display:\"block\"},\"kill `cat es.pid`\\n\")))),\"\\n\",a().createElement(n.p,null,\"위 파일들을 Elasticsearch 홈 경로에 저장하고 실행할 수 있도록 권한을 755로 변경합니다.\"),\"\\n\",a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-bash\",display:\"block\"},\"$ echo 'bin/elasticsearch -d -p es.pid' > start.sh\\n\\n$ echo 'kill `cat es.pid`' > stop.sh\\n\\n$ chmod 755 start.sh stop.sh\\n\")),\"\\n\",a().createElement(n.p,null,\"이제 start.sh를 실행해 Elasticsearch 프로세스가 실행된 것을 확인하고, 다시 stop.sh을 실행해 Elasticsearch 프로세스를 종료 해 보겠습니다.\"),\"\\n\",a().createElement(n.pre,null,a().createElement(n.code,{className:\"language-bash\",display:\"block\"},\"$ ./start.sh\\n\\n$ ps -ef | grep elasticsearch\\n501 39259     1   0  8:18AM ttys000    0:09.14 /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/var/folders/0d/m7m670h13pz3lvr9xjz07zk80000gn/T/elasticsearch-5569881625664576635 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Dio.netty.allocator.type=unpooled -XX:MaxDirectMemorySize=536870912 -Des.path.home=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0 -Des.path.conf=/Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/config -Des.distribution.flavor=default -Des.distribution.type=tar -Des.bundled_jdk=true -cp /Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/lib/* org.elasticsearch.bootstrap.Elasticsearch -d -p es.pid\\n501 39267 39259   0  8:18AM ttys000    0:00.02 /Users/kimjmin/elastic/getStart/elasticsearch-7.3.0/modules/x-pack-ml/platform/darwin-x86_64/bin/controller\\n501 39269 38460   0  8:18AM ttys000    0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn elasticsearch\\n\\n$ ls\\nLICENSE.txt    README.textile config         es.pid         lib            modules        start.sh\\nNOTICE.txt     bin            data           jdk            logs           plugins        stop.sh\\n\\n$ ./stop.sh\\n\\n$ ps -ef | grep elasticsearch\\n501 39291 38460   0  8:19AM ttys000    0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn elasticsearch\\n\\n$ ls\\nLICENSE.txt    README.textile config         jdk            logs           plugins        stop.sh\\nNOTICE.txt     bin            data           lib            modules        start.sh\\n\")),\"\\n\",a().createElement(n.p,null,a().createElement(n.strong,null,\"start.sh\"),\" 명령으로 Elasticsearch 가 백그라운드로 실행되었고, \",a().createElement(n.strong,null,\"ls\"),\" 명령으로 \",a().createElement(n.code,{display:\"inline\"},\"es.pid\"),\" 파일이 생성된 것을 확인할 수 있습니다. 다시 \",a().createElement(n.strong,null,\"stop.sh\"),\" 명령으로 Elasticsearch 를 종료 한 뒤에는 \",a().createElement(n.code,{display:\"inline\"},\"es.pid\"),\" 파일이 삭제된 것을 확인할 수 있습니다.\"))}};function i(e,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),s})()));","frontmatter":{"id":"esG7-02-02-01-download","slug":"/krEsguide7/esG7-02-02-01-download","title":"2.2.1 다운로드 설치 및 실행","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["install","download"],"link":"https://github.com/elastic/docs-kr/esguide7/blob/main","linkPath":"02-install/02-02-01-download.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}