{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},l={};function r(e){var n=l[e];if(void 0!==n)return n.exports;var a=l[e]={exports:{}};return t[e](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var a={};return(()=>{r.r(a),r.d(a,{default:()=>l});var e=r(825),n=r(24),t=r.n(n);const l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=Object.assign({},(0,e.useMDXComponents)(),n.components),r=l.wrapper;return r?t().createElement(r,n,t().createElement(a)):a();function a(){var l=Object.assign({p:\"p\",strong:\"strong\",h2:\"h2\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\",pre:\"pre\",code:\"code\",img:\"img\"},(0,e.useMDXComponents)(),n.components),r=l.DocLink,a=l.DocTabs,s=l.DocTab;return r||o(\"DocLink\",!0),s||o(\"DocTab\",!0),a||o(\"DocTabs\",!0),t().createElement(t().Fragment,null,t().createElement(l.p,null,\"우리가 사용하는 언어들은 영어만 보더라도 문법에 따라 명사 뒤에 \",t().createElement(l.strong,null,\"~s\"),\", \",t().createElement(l.strong,null,\"~ness\"),\" 등이 붙거나 동사 뒤에 \",t().createElement(l.strong,null,\"~ing\"),\", \",t().createElement(l.strong,null,\"~ed\"),\" 등이 붙는 등 변화가 많습니다. 검색을 할 때는 보통 이런 문법에 따른 단어의 변형에 상관 없이 검색이 가능해야 하기 때문에 텍스트 데이터를 분석할 때 각각의 텀에 있는 단어들을 기본 형태인 어간을 추출하는 과정을 진행해야 합니다. 이 과정을 보통 \",t().createElement(l.strong,null,\"어간 추출\"),\" 또는 \",t().createElement(l.strong,null,\"형태소 분석\"),\" 이라고 하며 영어로는 \",t().createElement(l.strong,null,\"stemming\"),\" 이라고 합니다. 그리고 형태소 분석을 하는 도구를 형태소 분석기, 영어로는 \",t().createElement(l.strong,null,\"stemmer\"),\" 라고 합니다.\"),\"\\n\",t().createElement(l.p,null,\"Elasticsearch 에서는 다양한 형태소 분석기들을 지원하며 Elastic사에서 공식적으로 지원하지 않는 국가의 언어들도 플러그인 형태로 사용 가능하도록 오픈소스로 배포되는 분석기들이 많이 있습니다. Elasticsearch 에서 사용 가능한 형태소 분석기 중에서 가장 많이 알려진 형태소 분석 알고리즘인 Snowball 과 한글 형태소 분석기인 Nori에 대해 살펴보도록 하겠습니다.\"),\"\\n\",t().createElement(l.h2,{id:\"671-snowball\"},\"6.7.1 Snowball\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,\"Snowball\"),\" 은 2000년 경에 정보 검색의 선구자인 마틴 포터 박사가 개발하여 무료로 공개한 형태소 분석 알고리즘입니다. 보통 ~ing, ~s 등을 제거하여 문장에 쓰인 단어들을 기본 형태로 변경합니다. Elasticsearch 에서 Snowball 은 애널라이저, 토크나이저, 토큰 필터가 모두 정의되어 있으며 사용 방법은 앞의 \",t().createElement(r,{id:\"esG7-06-03-analyzer\",text:\"사용자 정의 애널라이저\"}),\" 부분에 설명되어 있으니 기억나지 않으면 앞으로 가서 다시 확인 해 보시기 바랍니다.\"),\"\\n\",t().createElement(l.h2,{id:\"672-노리-nori-한글-형태소-분석기\"},\"6.7.2 노리 (nori) 한글 형태소 분석기\"),\"\\n\",t().createElement(l.h3,{id:\"커뮤니티-한글-형태소-분석기---아리랑-은전한닢-open-korean-text\"},\"커뮤니티 한글 형태소 분석기 - 아리랑, 은전한닢, Open Korean Text\"),\"\\n\",t().createElement(l.p,null,\"한글은 형태의 변형이 매우 복잡한 언어입니다. 특히 복합어, 합성어 등이 많아 하나의 단어도 여러 어간으로 분리해야 하는 경우가 많아 한글을 형태소 분석을 하려면 반드시 한글 형태소 사전이 필요합니다. 오픈 소스 커뮤니티에서 개발되어 Elasticsearch에서 사용 가능한 한글 형태소 분석기는 다음과 같은 것들이 있습니다.\"),\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"아리랑 (arirang)\"),\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,\"URL: \",t().createElement(l.a,{href:\"https://github.com/HowookJeong/elasticsearch-analysis-arirang\"},\"https://github.com/HowookJeong/elasticsearch-analysis-arirang\")),\"\\n\",t().createElement(l.li,null,\"설명: korean analyzer (lucene analyzer kr arirang)\"),\"\\n\",t().createElement(l.li,null,\"License: as-is\"),\"\\n\"),\"\\n\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"은전한닢 (seunjeon)\"),\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,\"URL: \",t().createElement(l.a,{href:\"https://bitbucket.org/eunjeon/seunjeon\"},\"https://bitbucket.org/eunjeon/seunjeon\")),\"\\n\",t().createElement(l.li,null,\"설명: mecab-ko-dic 기반으로 만들어진 JVM 상에서 돌아가는 한국어 형태소분석기입니다. 기본적으로 java와 scala 인터페이스를 제공합니다. 사전이 패키지 내에 포함되어 있기 때문에 별도로 mecab-ko-dic을 설치할 필요가 없습니다. 특징으로는 (시스템 사전에 등록되어 있는 단어에 한하여) 복합명사 분해와 활용어 원형 찾기가 가능합니다.\"),\"\\n\",t().createElement(l.li,null,\"License: Apache 2.0\"),\"\\n\"),\"\\n\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"Open Korean Text\"),\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,\"URL: \",t().createElement(l.a,{href:\"https://github.com/open-korean-text/open-korean-text\"},\"https://github.com/open-korean-text/open-korean-text\")),\"\\n\",t().createElement(l.li,null,\"설명: 오픈소스 한국어 처리기 (Official Fork of twitter-korean-text). 스칼라로 쓰여진 한국어 처리기입니다. 현재 텍스트 정규화와 형태소 분석, 스테밍을 지원하고 있습니다. 짧은 트윗은 물론이고 긴 글도 처리할 수 있습니다.\"),\"\\n\",t().createElement(l.li,null,\"License: Apache 2.0\"),\"\\n\"),\"\\n\"),\"\\n\"),\"\\n\",t().createElement(l.p,null,\"(\",t().createElement(l.a,{href:\"https://www.elastic.co/kr/blog/using-korean-analyzers\"},\"https://www.elastic.co/kr/blog/using-korean-analyzers\"),\" 에서 발췌)\"),\"\\n\",t().createElement(l.p,null,\"Elasticsearch가 한글을 지원하지 않던 시절에 위의 형태소 분석기들은 한글 사용자들에게 큰 도움이 되었습니다. 하지만 외부에서 만들어진 기능이다 보니 Elasticsearch 버전이 올라가 구조가 변경되면 사용이 불가능해지고, 버그가 오류가 있어도 누군가가 나서서 쉽게 고치기 어려운 문제가 있었습니다.\"),\"\\n\",t().createElement(l.h3,{id:\"nori-개요\"},\"Nori 개요\"),\"\\n\",t().createElement(l.p,null,\"Elasticsearch 6.6 버전 부터 공식적으로 \",t().createElement(l.strong,null,\"Nori(노리)\"),\" 라고 하는 한글 형태소 분석기를 Elastic사에서 공식적으로 개발해서 지원을 하기 시작했습니다. 특이하게 nori는 프랑스 엔지니어인 \",t().createElement(l.a,{href:\"https://github.com/jimczi\"},\"Jim Ferenczi\"),\" 에 의해 처음 개발이 되었습니다. Jim 은 아파치 루씬의 커미터이며 Elasticsearch의 일본어 형태소 분석기인 \",t().createElement(l.strong,null,\"Kuromoji(구로모지)\"),\" 역시 Jim 이 처음 개발했습니다. Nori 는 \",t().createElement(l.strong,null,\"은전한닢\"),\"에서 사용하는 \",t().createElement(l.strong,null,\"mecab-ko-dic\"),\" 사전을 재 가공 하여 사용하고 있습니다. Nori 는 루씬의 기능으로 개발되었으며 루씬 소스에 반영되어 있으며 개발 이력은\\n\",t().createElement(l.a,{href:\"https://issues.apache.org/jira/browse/LUCENE-8231\"},\"https://issues.apache.org/jira/browse/LUCENE-8231\"),\"\\n에서 확인 할 수 있고 프로그램 소스는\\n\",t().createElement(l.a,{href:\"https://github.com/apache/lucene-solr/tree/master/lucene/analysis/nori\"},\"https://github.com/apache/lucene-solr/tree/master/lucene/analysis/nori\"),\"\\n에서 확인이 가능합니다.\"),\"\\n\",t().createElement(l.p,null,\"Nori 에 관련한 설명은 공식 홈페이지의 문서 페이지의 \",t().createElement(l.a,{href:\"https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-nori.html\"},\"Elasticsearch : Plugins and Integrations > Analysis Plugins > Nori\"),\" 페이지에서 찾을 수 있습니다.\"),\"\\n\",t().createElement(l.h3,{id:\"nori-설치\"},\"Nori 설치\"),\"\\n\",t().createElement(l.p,null,\"Nori 를 사용하기 위해서는 먼저 elasticsearch에 analysis-nori 플러그인을 설치해야 합니다. elasticsearch 홈 디렉토리에서 다음 명령을 실행하면 버전에 맞는 nori 플러그인을 받아서 자동으로 설치합니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-bash\",display:\"block\"},\"# nori 플러그인 설치\\n$ bin/elasticsearch-plugin install analysis-nori\\n\")),\"\\n\",t().createElement(l.p,null,\"설치된 nori 플러그인을 제거하려면 다음 명령을 실행합니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-bash\",display:\"block\"},\"# nori 플러그인 제거\\n$ bin/elasticsearch-plugin remove analysis-nori\\n\")),\"\\n\",t().createElement(l.p,null,t().createElement(l.a,{href:\"https://cloud.elastic.co/\"},\"Elastic 클라우드 서비스\"),\"에서 사용하기 위해서는 클러스터를 배포할 때 Customize deployment 메뉴의 Manage plugins and settings 부분에서 analysis-nori 부분을 선택합니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/06-07_install_nori_cloud.png\",alt:\"Elastic Cloud 서비스에서 nori 설치\"})),\"\\n\",t().createElement(l.h3,{id:\"nori_tokenizer\"},\"nori_tokenizer\"),\"\\n\",t().createElement(l.p,null,\"Nori는 \",t().createElement(l.strong,null,\"nori_tokenizer\"),\" 토크나이저와 \",t().createElement(l.strong,null,\"nori_part_of_speech\"),\", \",t().createElement(l.strong,null,\"nori_readingform\"),\" 토큰 필터를 제공합니다. 먼저 nori_tokenizer 토크나이저를 사용해서 한글을 간단하게 테스트 할 수 있습니다. 다음은 standard와 nori_tokenizer 를 비교해서 \",t().createElement(l.strong,null,'\"동해물과 백두산이\"'),\" 를 분석한 예제입니다. 당연히 테스트 하는 elasticsearch 에는 analysis-nori 플러그인이 설치되어 있어야 합니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# standard 토크나이저로 \"동해물과 백두산이\" 문장 분석\\nGET _analyze\\n{\\n  \"tokenizer\": \"standard\",\\n  \"text\": [\\n    \"동해물과 백두산이\"\\n  ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# standard 토크나이저로 \"동해물과 백두산이\" 문장 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"동해물과\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 4,\\n      \"type\" : \"<HANGUL>\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"백두산이\",\\n      \"start_offset\" : 5,\\n      \"end_offset\" : 9,\\n      \"type\" : \"<HANGUL>\",\\n      \"position\" : 1\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_tokenizer 토크나이저로 \"동해물과 백두산이\" 문장 분석\\nGET _analyze\\n{\\n  \"tokenizer\": \"nori_tokenizer\",\\n  \"text\": [\\n    \"동해물과 백두산이\"\\n  ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_tokenizer 토크나이저로 \"동해물과 백두산이\" 문장 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"동해\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 2,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"물\",\\n      \"start_offset\" : 2,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"과\",\\n      \"start_offset\" : 3,\\n      \"end_offset\" : 4,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    },\\n    {\\n      \"token\" : \"백두\",\\n      \"start_offset\" : 5,\\n      \"end_offset\" : 7,\\n      \"type\" : \"word\",\\n      \"position\" : 3\\n    },\\n    {\\n      \"token\" : \"산\",\\n      \"start_offset\" : 7,\\n      \"end_offset\" : 8,\\n      \"type\" : \"word\",\\n      \"position\" : 4\\n    },\\n    {\\n      \"token\" : \"이\",\\n      \"start_offset\" : 8,\\n      \"end_offset\" : 9,\\n      \"type\" : \"word\",\\n      \"position\" : 5\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"Standard 토크나이저는 공백 외에 아무런 분리를 하지 못했지만 nori_tokenizer는 한국어 사전 정보를 이용해 \",t().createElement(l.code,{display:\"inline\"},'\"token\" : \"동해\"'),\", \",t().createElement(l.code,{display:\"inline\"},'\"token\" : \"산\"'),\" 같은 단어을 분리 한 것을 확인할 수 있습니다. nori_tokenizer 에는 다음과 같은 옵션들이 있습니다.\"),\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"user_dictionary\"),\" : 사용자 사전이 저장된 파일의 경로를 입력합니다.\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"user_dictionary_rules\"),\" : 사용자 정의 사전을 배열로 입력합니다.\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.strong,null,\"decompound_mode\"),\" : 합성어의 저장 방식을 결정합니다. 다음 3개의 값을 사용 가능합니다.\",\"\\n\",t().createElement(l.ul,null,\"\\n\",t().createElement(l.li,null,t().createElement(l.code,{display:\"inline\"},\"none\"),\" : 어근을 분리하지 않고 완성된 합성어만 저장합니다.\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.code,{display:\"inline\"},\"discard\"),\" (디폴트) : 합성어를 분리하여 각 어근만 저장합니다.\"),\"\\n\",t().createElement(l.li,null,t().createElement(l.code,{display:\"inline\"},\"mixed\"),\" : 어근과 합성어를 모두 저장합니다.\"),\"\\n\"),\"\\n\"),\"\\n\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,\"user_dictionary\"),\"는 다른 애널라이저들과 마찬가지로 config 디렉토리의 상대 경로를 입력하며 변경시 인덱스를 _close / _open 하면 반영됩니다. 사전의 단어들에는 우선순위가 있으며 문장 \",t().createElement(l.strong,null,'\"동해물과\"'),\" 에서는 \",t().createElement(l.strong,null,'\"동해\"'),' 가 가장 우선순위가 높아 \"동해\" 가 먼저 추출되고 다시 ',t().createElement(l.strong,null,'\"물\"'),\" 그리고 \",t().createElement(l.strong,null,'\"과\"'),\" 가 추출되어 \",t().createElement(l.strong,null,'\"동해\"+\"물\"+\"과\"'),\" 같은 형태가 됩니다. user_dictionary 경로에 있는 사전 파일이나 user_dictionary_rules 설정값에 단어만 나열 해 주면 이 단어들을 가장 우선으로 추출합니다.\"),\"\\n\",t().createElement(l.p,null,\"다음은 \",t().createElement(l.strong,null,\"my_nori\"),\" 인덱스에 \",t().createElement(l.strong,null,\"user_dictionary_rules\"),\"옵션을 이용하여 사용자 사전 \",t().createElement(l.strong,null,'\"해물\"'),\" 을 지정하고 \",t().createElement(l.strong,null,'\"동해물과\"'),\" 를 분석한 예제입니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# my_nori 인덱스에 \"해물\" 사전을 추가한 my_nori_tokenizer 생성\\nPUT my_nori\\n{\\n  \"settings\": {\\n    \"analysis\": {\\n      \"tokenizer\": {\\n        \"my_nori_tokenizer\": {\\n          \"type\": \"nori_tokenizer\",\\n          \"user_dictionary_rules\": [\\n            \"해물\"\\n          ]\\n        }\\n      }\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# my_nori_tokenizer 토크나이저로 \"동해물과\" 분석\\nGET my_nori/_analyze\\n{\\n  \"tokenizer\": \"my_nori_tokenizer\",\\n  \"text\": [\\n    \"동해물과\"\\n  ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# my_nori_tokenizer 토크나이저로 \"동해물과\" 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"동\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 1,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"해물\",\\n      \"start_offset\" : 1,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"과\",\\n      \"start_offset\" : 3,\\n      \"end_offset\" : 4,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"이렇게 사용자 사전에 \",t().createElement(l.strong,null,'\"해물\"'),' 이라는 단어를 추가하면 \"동해물과\" 는 ',t().createElement(l.strong,null,'\"동\"+\"해물\"+\"과\"'),' 로 분석이 되어 이 문장이 포함된 도큐먼트는 \"동해\" 로는 검색이 되지 않고 **\"해물\"**로 검색이 됩니다.'),\"\\n\",t().createElement(l.p,null,'\"백두산\" 은 \"백두\"+\"산\" 두 어근이 합쳐진 합성어 입니다. 보통 \"미역\"+\"국\" 같은 음식이나 \"서울\"+\"역\" 같은 역 이름에 합성어가 많습니다. 다음은 ',t().createElement(l.strong,null,\"decompound_mode\"),' 의 3가지 옵션이 문장 \"백두산이\"을 각각 어떻게 분석되는지 확인하는 예제입니다.'),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# decompound_mode 모드를 각각 none, discard, mixed 로 설정한 토크나이저 설장\\nPUT my_nori\\n{\\n  \"settings\": {\\n    \"analysis\": {\\n      \"tokenizer\": {\\n        \"nori_none\": {\\n          \"type\": \"nori_tokenizer\",\\n          \"decompound_mode\": \"none\"\\n        },\\n        \"nori_discard\": {\\n          \"type\": \"nori_tokenizer\",\\n          \"decompound_mode\": \"discard\"\\n        },\\n        \"nori_mixed\": {\\n          \"type\": \"nori_tokenizer\",\\n          \"decompound_mode\": \"mixed\"\\n        }\\n      }\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_none 토크나이저로 \"백두산이\" 분석\\nGET my_nori/_analyze\\n{\\n  \"tokenizer\": \"nori_none\",\\n  \"text\": [ \"백두산이\" ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_none 토크나이저로 \"백두산이\" 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"백두산\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"이\",\\n      \"start_offset\" : 3,\\n      \"end_offset\" : 4,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_discard 토크나이저로 \"백두산이\" 분석\\nGET my_nori/_analyze\\n{\\n  \"tokenizer\": \"nori_discard\",\\n  \"text\": [ \"백두산이\" ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_discard 토크나이저로 \"백두산이\" 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"백두\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 2,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"산\",\\n      \"start_offset\" : 2,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"이\",\\n      \"start_offset\" : 3,\\n      \"end_offset\" : 4,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_mixed 토크나이저로 \"백두산이\" 분석\\nGET my_nori/_analyze\\n{\\n  \"tokenizer\": \"nori_mixed\",\\n  \"text\": [ \"백두산이\" ]\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_mixed 토크나이저로 \"백두산이\" 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"백두산\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 0,\\n      \"positionLength\" : 2\\n    },\\n    {\\n      \"token\" : \"백두\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 2,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    },\\n    {\\n      \"token\" : \"산\",\\n      \"start_offset\" : 2,\\n      \"end_offset\" : 3,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"이\",\\n      \"start_offset\" : 3,\\n      \"end_offset\" : 4,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"각 설정에 따라 어근을 분리하거나 분리하지 않거나 모두 저장하는 것을 확인할 수 있습니다. \",t().createElement(l.strong,null,\"decompound_mode\"),\" 의 디폴트 값은 \",t().createElement(l.strong,null,\"discard\"),\" 입니다.\"),\"\\n\",t().createElement(l.h3,{id:\"nori_part_of_speech-와-품사-정보\"},\"nori_part_of_speech 와 품사 정보\"),\"\\n\",t().createElement(l.p,null,\"한글 검색에서는 보통 명사, 동명사 정도만을 검색하고 조사, 형용사 등은 제거하는 것이 바람직합니다. \",t().createElement(l.strong,null,\"nori_part_of_speech\"),\" 토큰 필터를 이용해서 제거할 \",t().createElement(l.strong,null,\"품사(POS - Part Of Speech)\"),\" 정보의 지정이 가능하며, 옵션 \",t().createElement(l.strong,null,\"stoptags\"),\" 값에 배열로 제외할 품사 코드를 나열해서 입력해서 사용합니다. 다음은 품사 코드의 일부 정보들입니다.\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.img,{src:\"/ZWxhc3RpYy9kb2NzLWtyL2VzZ3VpZGU3/assets/06-07_kokoma_postag.png\",alt:\"(출처 : 꼬꼬마 한국어 형태소 분석기 - http://kkma.snu.ac.kr/documents/?doc=postag)\"})),\"\\n\",t().createElement(l.p,null,\"이 외의 품사 코드는 출처에 명시된 정보 페이지에서 찾을 수 있습니다. \",t().createElement(l.strong,null,\"stoptags\"),\"의 디폴트 값은 다음과 같습니다.\"),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'\"stoptags\": [\\n  \"E\", \"IC\", \"J\", \"MAG\", \"MAJ\",\\n  \"MM\", \"SP\", \"SSC\", \"SSO\", \"SC\",\\n  \"SE\", \"XPN\", \"XSA\", \"XSN\", \"XSV\",\\n  \"UNA\", \"NA\", \"VSV\"\\n]\\n')),\"\\n\",t().createElement(l.p,null,\"다음은 \",t().createElement(l.strong,null,\"my_pos\"),\" 인덱스에 **수사(NR)**를 제거하도록 \",t().createElement(l.strong,null,\"stoptags\"),'를 지정하고 문장 **\"다섯아이가\"**를 분석한 예제입니다.'),\"\\n\",t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# my_pos 인덱스에 수사(NR)을 제거하는 my_pos_f 토큰필터 지정\\nPUT my_pos\\n{\\n  \"settings\": {\\n    \"index\": {\\n      \"analysis\": {\\n        \"filter\": {\\n          \"my_pos_f\": {\\n            \"type\": \"nori_part_of_speech\",\\n            \"stoptags\": [\\n              \"NR\"\\n            ]\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n')),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# my_pos_f 토큰필터로 \"다섯아이가\" 분석\\nGET my_pos/_analyze\\n{\\n  \"tokenizer\": \"nori_tokenizer\",\\n  \"filter\": [\\n    \"my_pos_f\"\\n  ],\\n  \"text\": \"다섯아이가\"\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# my_pos_f 토큰필터로 \"다섯아이가\" 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"아이\",\\n      \"start_offset\" : 2,\\n      \"end_offset\" : 4,\\n      \"type\" : \"word\",\\n      \"position\" : 1\\n    },\\n    {\\n      \"token\" : \"가\",\\n      \"start_offset\" : 4,\\n      \"end_offset\" : 5,\\n      \"type\" : \"word\",\\n      \"position\" : 2\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"본래 \",t().createElement(l.strong,null,'\"다섯\"+\"아이\"+\"가\"'),' 로 분석되어야 할 문장에서 수사인 **\"다섯\"**이 제거 된 것을 확인할 수 있습니다.'),\"\\n\",t().createElement(l.h3,{id:\"nori_readingform\"},\"nori_readingform\"),\"\\n\",t().createElement(l.p,null,t().createElement(l.strong,null,\"nori_readingform\"),' 토큰 필터는 한자로 된 단어를 한글로 바꾸어 저장을 합니다. 별도의 옵션 없이 토큰필터로 명시하면 바로 적용이 가능합니다. 다음은 \"春夏秋冬\"(춘하추동)을 nori_readingform 토큰 필터를 사용해서 한글로 변형하는 예제입니다.'),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_readingform 토큰필터로 \"春夏秋冬\"(춘하추동) 분석\\nGET _analyze\\n{\\n  \"tokenizer\": \"nori_tokenizer\",\\n  \"filter\": [\\n    \"nori_readingform\"\\n  ],\\n  \"text\": \"春夏秋冬\"\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# nori_readingform 토큰필터로 \"春夏秋冬\"(춘하추동) 분석 결과\\n{\\n  \"tokens\" : [\\n    {\\n      \"token\" : \"춘하추동\",\\n      \"start_offset\" : 0,\\n      \"end_offset\" : 4,\\n      \"type\" : \"word\",\\n      \"position\" : 0\\n    }\\n  ]\\n}\\n')))),\"\\n\",t().createElement(l.h3,{id:\"explain--true-옵션\"},\"explain : true 옵션\"),\"\\n\",t().createElement(l.p,null,\"query 또는 _analuze API 에서 \",t().createElement(l.code,{display:\"inline\"},'\"explain\": true'),\" 옵션을 추가하면 분석된 한글 형태소들의 품사 정보를 같이 볼 수 있습니다. \",t().createElement(l.strong,null,\"explain\"),\" 옵션은 nori 외에도 대부분의 애널라이저나 쿼리에서 사용하면 확장된 정보를 보여줍니다. 다음은 \",t().createElement(l.strong,null,'\"동해물과 백두산이\"'),\" 문장을 분석하면서 explain 옵션을 추가하여 상세 정보를 본 예제입니다.\"),\"\\n\",t().createElement(a,null,t().createElement(s,{name:\"request\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# \"explain\": true 옵션을 이용해서 분석 정보 표시\\nGET _analyze\\n{\\n  \"tokenizer\": \"nori_tokenizer\",\\n  \"text\": \"동해물과 백두산이\",\\n  \"explain\": true\\n}\\n'))),t().createElement(s,{name:\"response\"},t().createElement(l.pre,null,t().createElement(l.code,{className:\"language-javascript\",display:\"block\"},'# \"explain\": true 옵션을 이용해서 분석 정보 표시 결과\\n{\\n  \"detail\" : {\\n    \"custom_analyzer\" : true,\\n    \"charfilters\" : [ ],\\n    \"tokenizer\" : {\\n      \"name\" : \"nori_tokenizer\",\\n      \"tokens\" : [\\n        {\\n          \"token\" : \"동해\",\\n          \"start_offset\" : 0,\\n          \"end_offset\" : 2,\\n          \"type\" : \"word\",\\n          \"position\" : 0,\\n          \"bytes\" : \"[eb 8f 99 ed 95 b4]\",\\n          \"leftPOS\" : \"NNP(Proper Noun)\",\\n          \"morphemes\" : null,\\n          \"posType\" : \"MORPHEME\",\\n          \"positionLength\" : 1,\\n          \"reading\" : null,\\n          \"rightPOS\" : \"NNP(Proper Noun)\",\\n          \"termFrequency\" : 1\\n        },\\n        {\\n          \"token\" : \"물\",\\n          \"start_offset\" : 2,\\n          \"end_offset\" : 3,\\n          \"type\" : \"word\",\\n          \"position\" : 1,\\n          \"bytes\" : \"[eb ac bc]\",\\n          \"leftPOS\" : \"NNG(General Noun)\",\\n          \"morphemes\" : null,\\n          \"posType\" : \"MORPHEME\",\\n          \"positionLength\" : 1,\\n          \"reading\" : null,\\n          \"rightPOS\" : \"NNG(General Noun)\",\\n          \"termFrequency\" : 1\\n        },\\n        {\\n          \"token\" : \"과\",\\n          \"start_offset\" : 3,\\n          \"end_offset\" : 4,\\n          \"type\" : \"word\",\\n          \"position\" : 2,\\n          \"bytes\" : \"[ea b3 bc]\",\\n          \"leftPOS\" : \"J(Ending Particle)\",\\n          \"morphemes\" : null,\\n          \"posType\" : \"MORPHEME\",\\n          \"positionLength\" : 1,\\n          \"reading\" : null,\\n          \"rightPOS\" : \"J(Ending Particle)\",\\n          \"termFrequency\" : 1\\n        },\\n        {\\n          \"token\" : \"백두\",\\n          \"start_offset\" : 5,\\n          \"end_offset\" : 7,\\n          \"type\" : \"word\",\\n          \"position\" : 3,\\n          \"bytes\" : \"[eb b0 b1 eb 91 90]\",\\n          \"leftPOS\" : \"NNG(General Noun)\",\\n          \"morphemes\" : null,\\n          \"posType\" : \"MORPHEME\",\\n          \"positionLength\" : 1,\\n          \"reading\" : null,\\n          \"rightPOS\" : \"NNG(General Noun)\",\\n          \"termFrequency\" : 1\\n        },\\n        {\\n          \"token\" : \"산\",\\n          \"start_offset\" : 7,\\n          \"end_offset\" : 8,\\n          \"type\" : \"word\",\\n          \"position\" : 4,\\n          \"bytes\" : \"[ec 82 b0]\",\\n          \"leftPOS\" : \"NNG(General Noun)\",\\n          \"morphemes\" : null,\\n          \"posType\" : \"MORPHEME\",\\n          \"positionLength\" : 1,\\n          \"reading\" : null,\\n          \"rightPOS\" : \"NNG(General Noun)\",\\n          \"termFrequency\" : 1\\n        },\\n        {\\n          \"token\" : \"이\",\\n          \"start_offset\" : 8,\\n          \"end_offset\" : 9,\\n          \"type\" : \"word\",\\n          \"position\" : 5,\\n          \"bytes\" : \"[ec 9d b4]\",\\n          \"leftPOS\" : \"J(Ending Particle)\",\\n          \"morphemes\" : null,\\n          \"posType\" : \"MORPHEME\",\\n          \"positionLength\" : 1,\\n          \"reading\" : null,\\n          \"rightPOS\" : \"J(Ending Particle)\",\\n          \"termFrequency\" : 1\\n        }\\n      ]\\n    },\\n    \"tokenfilters\" : [ ]\\n  }\\n}\\n')))),\"\\n\",t().createElement(l.p,null,\"이번 장에서는 elasticsearch가 데이터를 저장하는 색인 과정에서 처리하는 수많은 작업들에 대해 알아보았습니다. 텍스트 분석 및 텀의 개념과, 데이터 분석에 사용되는 애널라이저, 토크나이저, 토큰 필터, 캐릭터 필터 도구들에 대해 학습을 했습니다. 이런 텍스트 데이터 처리 과정을 통해 Elasticsearch는 빠른 풀 텍스트 검색 기능을 제공하며 다양한 방법으로 데이터를 다룰 수 있도록 합니다.\"),\"\\n\",t().createElement(l.p,null,\"다음 장에서는 인덱스의 세팅 및 매핑 설정 방법과 다양한 형태의 필드들에 대해 알아보도록 하겠습니다.\"))}};function o(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}})(),a})()));","frontmatter":{"id":"esG7-06-07-stemming","slug":"/krEsguide7/esG7-06-07-stemming","title":"6.7 형태소 분석 - Stemming","description":"모든 문서에 대한 저작권은 Elastic 과 김종민(kimjmin@gmail.com) 에게 있으며 허가되지 않은 무단 복제나 배포 및 출판을 금지합니다. 본 문서의 내용 및 포함된 자료를 인용하고자 하는 경우 출처를 명시하고 게재된 주소를 김종민(kimjmin@gmail.com)에게 알려주시기 바랍니다.","date":"2022-01-25T00:00:00.000Z","tags":["indexing","text","analysis","token","filter","stemming"],"link":"https://github.com/elastic/docs-kr/esguide7/blob/main","linkPath":"06-text-analysis/06-07-stemming.mdx"},"missionId":"krEsguide7"},"__N_SSG":true}