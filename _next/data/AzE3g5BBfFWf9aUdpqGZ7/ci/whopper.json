{"pageProps":{"bundle":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],t):\"object\"==typeof exports?exports.MDXContent=t(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=t(e.mdxJsReact,e.React)}(this,((e,t)=>(()=>{\"use strict\";var n={24:e=>{e.exports=t},825:t=>{t.exports=e}},a={};function o(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={exports:{}};return n[e](r,r.exports,o),r.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var r={};return(()=>{o.r(r),o.d(r,{default:()=>a});var e=o(825),t=o(24),n=o.n(t);const a=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=Object.assign({},(0,e.useMDXComponents)(),t.components),o=a.wrapper;return o?n().createElement(o,t,n().createElement(r)):r();function r(){var a=Object.assign({p:\"p\",h2:\"h2\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\",pre:\"pre\",code:\"code\",ol:\"ol\"},(0,e.useMDXComponents)(),t.components);return n().createElement(n().Fragment,null,n().createElement(a.p,null,\"Whopper is an IT maintained database that maps out employee data between the different Elastic back-end systems (GitHub, Workday, Okta, Slack...). This document provides some background around this database and information on how to access it experimentally.\"),\"\\n\",n().createElement(a.h2,{id:\"context\"},\"Context\"),\"\\n\",n().createElement(a.h3,{id:\"use-case\"},\"Use case\"),\"\\n\",n().createElement(a.p,null,\"Elastic uses different backend systems to perform specfic operations, for example:\"),\"\\n\",n().createElement(a.ul,null,\"\\n\",n().createElement(a.li,null,\"Workday is used for everything HR related and contains the source of truth around organizational data\"),\"\\n\",n().createElement(a.li,null,\"GitHub is the source of truth for source code management\"),\"\\n\"),\"\\n\",n().createElement(a.p,null,\"Elastic employees sign-up to GitHub using their personal GitHub account, and there are no conventions for mapping a GitHub user to the matching Workday profile. Similarly, there are no mappings available between Workday and Slack.\"),\"\\n\",n().createElement(a.h3,{id:\"whopper\"},\"Whopper\"),\"\\n\",n().createElement(a.p,null,n().createElement(a.a,{href:\"https://github.com/elastic/it-eng/blob/1477c913c35de6de5d30dc5633d25c49c04422ce/docs/whopper.md\"},\"Whopper\"),\" is a backend systems owned by IT that focuses on the lifecycle of Elasticians. Most of Elastic applications are integrated with Okta but there are few services and applications still handled manually. This is where the Whopper shines. It has developed a bunch of serverless scripts that actively scans the list of users and groups on the applications in use and stores the data in a postgreSQL database.\"),\"\\n\",n().createElement(a.h2,{id:\"accessing-whopper-data\"},\"Accessing whopper data\"),\"\\n\",n().createElement(a.p,null,\"While whopper is used by the IT team in their day-to-day operations, the CI team occasionally needs to crunch data or correlate information between GitHub, Workday and slack. To that end, a \",n().createElement(a.a,{href:\"https://github.com/elastic/it-eng/issues/950\"},\"request\"),\" was made to IT to get access to a Whopper export.\"),\"\\n\",n().createElement(a.h3,{id:\"gcp-information-and-creds\"},\"GCP information and creds\"),\"\\n\",n().createElement(a.p,null,\"At this time, the IT team is providing us a daily whopper export of all the employee data with the below informations for each employee:\"),\"\\n\",n().createElement(a.pre,null,n().createElement(a.code,{className:\"language-json\",display:\"block\"},' {\\n    \"workday_employee_status\": \"On board\",\\n    \"workday_employee_type\": \"Regular\",\\n    \"firstname\": \"Foo\",\\n    \"lastname\": \"Bar\",\\n    \"email\": \"foo.bar@elastic.co\",\\n    \"workday_cost_center\": \"Solutions - Team\",\\n    \"okta_manager\": \"bim.bam\",\\n    \"okta_supervisory_org\": \"Solutions - Team\",\\n    \"workday_supervisor_org\": \"Solutions - Team (Bim Bam (001234))\",\\n    \"slack_name\": foobar,\\n    \"github\": \"foobar\",\\n    \"github_username\": foobar\\n  }\\n')),\"\\n\",n().createElement(a.p,null,\"In \",n().createElement(a.a,{href:\"https://github.com/elastic/it-eng/issues/950\"},\"elastic/it-eng#950\"),\", the IT team helped setup a service account to retrieve the data. The important bits are as below:\"),\"\\n\",n().createElement(a.ul,null,\"\\n\",n().createElement(a.li,null,\"GCP project : 'elastic-it-prod'\"),\"\\n\",n().createElement(a.li,null,\"GCP bucket: 'nassim-infra-elastic-it-prod'\"),\"\\n\",n().createElement(a.li,null,\"GCP blob: 'v_nassim_query.json'\"),\"\\n\",n().createElement(a.li,null,\"Service account creds: currently stored in Vault at \",n().createElement(a.code,{display:\"inline\"},\"secret/ci/elastic-ci/whopper_service_account\")),\"\\n\"),\"\\n\",n().createElement(a.p,null,\"Note: Assuming you have the proper access to trigger a re-sync of the data, you can run:\"),\"\\n\",n().createElement(a.p,null,n().createElement(a.code,{display:\"inline\"},\"curl -I https://us-central1-elastic-it-prod.cloudfunctions.net/nassim-puller -H \\\"Authorization: bearer $(gcloud auth print-identity-token)\\\" | grep HTTP | cut -d' ' -f2\")),\"\\n\",n().createElement(a.h3,{id:\"accessing-whopper-data-programmatically\"},\"Accessing whopper data programmatically\"),\"\\n\",n().createElement(a.p,null,\"For your own data analysis needs, you may want to access Whopper data programmatically. You may accomplish this by running the below script:\"),\"\\n\",n().createElement(a.ol,null,\"\\n\",n().createElement(a.li,null,\"Install requirements\"),\"\\n\"),\"\\n\",n().createElement(a.p,null,n().createElement(a.code,{display:\"inline\"},\"pip install google-cloud-storage\")),\"\\n\",n().createElement(a.ol,{start:\"2\"},\"\\n\",n().createElement(a.li,null,\"Write your \",n().createElement(a.code,{display:\"inline\"},\"whopper_data.py\"),\" script\"),\"\\n\"),\"\\n\",n().createElement(a.pre,null,n().createElement(a.code,{className:\"language-python\",display:\"block\"},\"#!/usr/bin/env python3\\nimport os\\nimport sys\\nimport json\\nfrom google.cloud import storage\\nfrom google.oauth2 import service_account\\n\\nWHOPPER_DATA_GCP_PROJECT='elastic-it-prod'\\nWHOPPER_DATA_GCP_BUCKET='nassim-infra-elastic-it-prod'\\nWHOPPER_DATA_BLOB='v_nassim_query.json'\\n\\ndef dump_whopper_data(gcs_creds):\\n        json_acct_info = json.loads(gcs_creds)\\n        gs_credentials = service_account.Credentials.from_service_account_info(json_acct_info)\\n\\n        gs_client = storage.Client(project=WHOPPER_DATA_GCP_PROJECT, credentials=gs_credentials)\\n        gs_bucket = gs_client.get_bucket(WHOPPER_DATA_GCP_BUCKET)\\n        gs_blob = gs_bucket.get_blob(WHOPPER_DATA_BLOB)\\n\\n        whopper_data = json.loads(gs_blob.download_as_text(encoding=\\\"utf-8\\\"))\\n        print(json.dumps(whopper_data, indent=2))\\n\\nif __name__ == '__main__':\\n    try:\\n        gcs_creds = os.environ[\\\"SERVICEACCOUNT_JSON_CREDS\\\"]\\n    except KeyError:\\n        print(\\\"Json credentials to the whopper account gcs bucket not found in $SERVICEACCOUNT_JSON_CREDS\\\")\\n        print(\\\"Usage : SERVICEACCOUNT_JSON_CREDS=$(vault read -field=creds path/to/creds) python %s\\\" % sys.argv[0])\\n        sys.exit(1)\\n    dump_whopper_data(gcs_creds)\\n\")),\"\\n\",n().createElement(a.ol,{start:\"3\"},\"\\n\",n().createElement(a.li,null,\"Run it\"),\"\\n\"),\"\\n\",n().createElement(a.p,null,n().createElement(a.code,{display:\"inline\"},\"SERVICEACCOUNT_JSON_CREDS=$(vault read -field=creds secret/ci/elastic-ci/whopper_service_account) ptyhon whopper_data.py\")),\"\\n\",n().createElement(a.h2,{id:\"future-steps\"},\"Future steps\"),\"\\n\",n().createElement(a.p,null,\"Making the above data available programmatically to all Elasticians would be great - an example use case could be around quickly looking up which team a GitHub user is from via a Slack command. And while all the data are available, the webservice with some sort of authentication behind it is yet to be written.\"),\"\\n\",n().createElement(a.p,null,\"The question of how to implement authentication for such a service is a thorny one - implementing fully-fledged API key management for this system could be overkill, yet some level of authentication is necessary to operate this as a service. Using an Okta integration to authenticate with it may not be the right fit for an API intended to be consumed by human and machine users.\"),\"\\n\",n().createElement(a.p,null,\"A possible approach would be to use a single, rotating API key stored in Vault and available to all current employees.\"))}}})(),r})()));","frontmatter":{"id":"ciDocsWhopper","slug":"/ci/whopper","title":"Accessing Workday, GitHub, Slack data programmatically","summary":"Documentation on how to access Workday, GitHub, Slack employee data programmtically.","date":"2022-05-03T00:00:00.000Z","tags":["developer tools","whopper"],"link":"https://github.com/elastic/ci/blob/main","linkPath":"docs/whopper_data.mdx"},"missionId":"krVideos"},"__N_SSG":true}