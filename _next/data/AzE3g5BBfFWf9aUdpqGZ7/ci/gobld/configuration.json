{"pageProps":{"bundle":"!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n(require(\"mdxJsReact\"),require(\"React\")):\"function\"==typeof define&&define.amd?define([\"mdxJsReact\",\"React\"],n):\"object\"==typeof exports?exports.MDXContent=n(require(\"mdxJsReact\"),require(\"React\")):e.MDXContent=n(e.mdxJsReact,e.React)}(this,((e,n)=>(()=>{\"use strict\";var t={24:e=>{e.exports=n},825:n=>{n.exports=e}},a={};function o(e){var n=a[e];if(void 0!==n)return n.exports;var r=a[e]={exports:{}};return t[e](r,r.exports,o),r.exports}o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),o.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var r={};return(()=>{o.r(r),o.d(r,{default:()=>a});var e=o(825),n=o(24),t=o.n(n);const a=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=Object.assign({},(0,e.useMDXComponents)(),n.components),o=a.wrapper;return o?t().createElement(o,n,t().createElement(r)):r();function r(){var a=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",a:\"a\",br:\"br\",h3:\"h3\"},(0,e.useMDXComponents)(),n.components);return t().createElement(t().Fragment,null,t().createElement(a.h2,{id:\"global-configuration\"},\"Global configuration\"),\"\\n\",t().createElement(a.p,null,t().createElement(a.code,{display:\"inline\"},\"Gobld\"),\" has a number of 'global' configuration items that apply either to the Gobld process itself, or every worker instance launched by \",t().createElement(a.code,{display:\"inline\"},\"Gobld\"),\".\"),\"\\n\",t().createElement(a.p,null,\"They are:\"),\"\\n\",t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-yaml\",display:\"block\"},\"gobld:\\n  config:\\n    agentLimit: 100                         # The max amount of agents Gobld is allowed to have running at any given time\\n    baseName: 'devops-ci-worker-immutable'  # This is the prefix for all Gobld managed instances\\n    creatorLoopTimer: 10                    # How often the Gobld creator loop runs (seconds)\\n    destroyerLoopTimer: 10                  # How often the Gobld destroyer loop runs (seconds)\\n    getJobsLoopTimer: 10                    # How often the Gobld get jobs loop runs (seconds)\\n    instanceConnectTimeout: 10              # Amount of minutes to wait for an instance to join Jenkins\\n    instanceMaxAge: 360                     # Maximum age of an instance in minutes\\n    rateLimitCreate: 60                     # Amount of new worker instances per minute that can be created\\n\")),\"\\n\",t().createElement(a.h2,{id:\"agent-defaults-configuration\"},\"Agent defaults configuration\"),\"\\n\",t().createElement(a.p,null,\"Each provider defines a default agent configuration that Gobld merges with the Buildkite agent configuration before launching an agent.\"),\"\\n\",t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-yaml\",display:\"block\"},\"providers:\\n  gcp:\\n    config:                       # Provider specific configuration for configuring this worker. See the providers documentation for more info\\n      instanceConnectTimeout: 10  # Amount of minutes to wait for an instance to join Jenkins before being retried\\n      instanceMaxAge: 360         # Maximum age of an instance in minutes\\n      retryAttempts: 3            # Amount of retry attempts before giving up when trying to launch a worker.\\n      retryTimeout: 30            # How many minutes to wait before retrying to launch workers for a build\\n    defaults:\\n      assignExternalIP: true\\n      diskSizeGb: 100\\n      diskType: 'pd-ssd'\\n      image: 'family/elastic-buildkite-agent-ubuntu-2004-lts'\\n      imageProject: 'elastic-images-qa'\\n      machineType: 'n1-standard-4'\\n      minCpuPlatform: 'Intel Skylake'\\n      networkTags:\\n        - 'buildkite-agent'\\n      preemptible: false\\n      serviceAccount: \\\"gcp-default-sa@elastic-ci-dev.iam.gserviceaccount.com\\\"\\n      zones:\\n        - 'us-central1-a'\\n        - 'us-central1-b'\\n        - 'us-central1-c'\\n        - 'us-central1-f'\\n\")),\"\\n\",t().createElement(a.p,null,\"For provider specific configuration options please refer to the \",t().createElement(a.a,{href:\"./providers/\"},\"provider documentation\")),\"\\n\",t().createElement(a.h2,{id:\"choosing-the-cloud-provider-for-an-agent\"},\"Choosing the Cloud Provider for an Agent\"),\"\\n\",t().createElement(a.p,null,\"Gobld supports launching agents in multiple different cloud providers, such as AWS, GCP or Kubernetes.\",t().createElement(a.br),\"\\n\",\"The required cloud provider can be picked by specifying the \",t().createElement(a.code,{display:\"inline\"},\"provider\"),\" agent tag. If no tag is specified, \",t().createElement(a.code,{display:\"inline\"},\"gobld\"),\" defaults to launching a Kubernetes (\",t().createElement(a.code,{display:\"inline\"},\"k8s\"),\") agent.\"),\"\\n\",t().createElement(a.h2,{id:\"dynamic-configuration-via-agent-tags\"},\"Dynamic Configuration via Agent tags\"),\"\\n\",t().createElement(a.p,null,\"Configuration for an agent can be modified dynamically using tag values specified within the Buildkite Pipeline \",t().createElement(a.code,{display:\"inline\"},\"agents\"),\" config block.\\nThe supported tag values differ per provider, so consult the relevant \",t().createElement(a.a,{href:\"./providers/\"},\"provider documentation\"),\" for an accurate list.\"),\"\\n\",t().createElement(a.p,null,\"A good example use of agent tags is to specify the required CPU or Memory for a Kubernetes pod, or the instance size for a GCP or AWS based agent.\"),\"\\n\",t().createElement(a.p,null,\"More details on specifying agent tags can be found \",t().createElement(a.a,{href:\"https://buildkite.com/docs/pipelines/defining-steps#targeting-specific-agents\"},\"here\"),\".\"),\"\\n\",t().createElement(a.h3,{id:\"examples\"},\"Examples\"),\"\\n\",t().createElement(a.p,null,\"In order to launch a Kubernetes based Agent that has 4 CPUs and 12GB memory with 250GB of ephemeral storage, the following \",t().createElement(a.code,{display:\"inline\"},\"agent\"),\" block could be used:\"),\"\\n\",t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-yaml\",display:\"block\"},'agents:\\n  provider: \"k8s\" # This is optional, as `k8s` is the default proider.\\n  cpu: \"4\"\\n  ephemeralStorage: \"250G\"\\n  memory: \"12G\"\\n')),\"\\n\",t().createElement(a.p,null,\"To launch a GCP based Agent that uses the \",t().createElement(a.code,{display:\"inline\"},\"c2-standard-16\"),\" machine type, the following \",t().createElement(a.code,{display:\"inline\"},\"agents\"),\" block could be used:\"),\"\\n\",t().createElement(a.pre,null,t().createElement(a.code,{className:\"language-yaml\",display:\"block\"},'agents:\\n  provider: \"gcp\"\\n  machineType: \"c2-standard-16\"\\n')))}}})(),r})()));","frontmatter":{"id":"ciGobldConfiguation","slug":"/ci/gobld/configuration","title":"Gobld Configuration","summary":"Gobld Configuration","date":"2022-03-28T00:00:00.000Z","tags":["ci","ci/cd","developer tools","buildkite","gobld","engineering","platform"],"link":"https://github.com/elastic/ci/blob/main","linkPath":"docs/gobld/configuration.mdx"},"missionId":"krVideos"},"__N_SSG":true}